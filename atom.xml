<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lwz&#39;s blog</title>
  
  
  <link href="https://lwzblog.com/atom.xml" rel="self"/>
  
  <link href="https://lwzblog.com/"/>
  <updated>2023-05-01T14:00:00.000Z</updated>
  <id>https://lwzblog.com/</id>
  
  <author>
    <name>维梓</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>echarts相关用法</title>
    <link href="https://lwzblog.com/posts/2043494a.html"/>
    <id>https://lwzblog.com/posts/2043494a.html</id>
    <published>2023-05-01T10:19:03.000Z</published>
    <updated>2023-05-01T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>echarts使用步骤</h1><ul><li>必须有一个具有宽高的div</li><li>引入echarts.min.js</li><li>JS代码<ul><li>初始化echarts（写法固定）<code>let 变量 = echarts.init(盒子)</code></li><li>配置echarts图表（配置项决定了图表的样子） <code>let 配置项 = &#123;&#125;</code></li><li>根据配置项，创建图表（写法固定）<code>变量.setOption(配置项)</code></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 准备一个具有宽高的盒子 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px; height: 400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 引入echarts --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 初始化echarts（写法固定）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 变量 = echarts.init(盒子)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 配置echarts图表（配置项决定了图表的样子）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 配置项 = &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">xAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: [<span class="string">&#x27;Mon&#x27;</span>, <span class="string">&#x27;Tue&#x27;</span>, <span class="string">&#x27;Wed&#x27;</span>, <span class="string">&#x27;Thu&#x27;</span>, <span class="string">&#x27;Fri&#x27;</span>, <span class="string">&#x27;Sat&#x27;</span>, <span class="string">&#x27;Sun&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">yAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">data</span>: [<span class="number">150</span>, <span class="number">230</span>, <span class="number">224</span>, <span class="number">218</span>, <span class="number">135</span>, <span class="number">147</span>, <span class="number">260</span>],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 根据配置项，创建图表（写法固定）</span></span></span><br><span class="line"><span class="language-javascript">    myChart.<span class="title function_">setOption</span>(option) <span class="comment">// setOption 第1个O是大写的</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>echarts常用的配置项</h1><p><img src="imgs/image-20230430084452814.png" alt="image-20230430084452814"></p><p>title - 标题</p><p>xAxis - X轴配置</p><p>yAxis - Y轴配置</p><p>series - 系列数据</p><ul><li>格式是 [{ 一个图形 }, { 一个图形 }, { 一个图形 }]</li></ul><p>color - 颜色配置</p><ul><li>格式 [‘red’, ‘green’, ‘blue’]</li><li>格式 [‘red’, ‘green’, ‘渐变色’]   ----- <a href="https://www.makeapie.cn/doc/echarts/zh/option.html#color">渐变色传送门</a></li></ul><p>grid - 坐标轴区域的配置，比如配置距离顶部 100 像素</p><p>legend - 图例配置</p><ul><li>需要设置series中每一项的 name 属性才行。</li></ul><p>tooltip - 鼠标移入提示</p><ul><li>默认是鼠标移入图形才能提示</li><li>将 trigger: ‘axis’ 之后，鼠标输到轴上即可提示。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> option = &#123;</span><br><span class="line">  <span class="comment">// 标题配置</span></span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;我的第1个图表&#x27;</span>, <span class="comment">// 主标题文本</span></span><br><span class="line">    <span class="attr">left</span>: <span class="string">&#x27;center&#x27;</span>, <span class="comment">// 主标题的位置</span></span><br><span class="line">    <span class="attr">textStyle</span>: &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">      <span class="comment">// 要求 标题的字体大小是 24px </span></span><br><span class="line">      <span class="attr">fontSize</span>: <span class="number">24</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// X轴配置</span></span><br><span class="line">  <span class="attr">xAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;Tue&#x27;</span>, <span class="string">&#x27;Wed&#x27;</span>, <span class="string">&#x27;Thu&#x27;</span>, <span class="string">&#x27;Fri&#x27;</span>, <span class="string">&#x27;Sat&#x27;</span>, <span class="string">&#x27;Sun&#x27;</span>],</span><br><span class="line">    <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span> <span class="comment">// 坐标轴文字的颜色</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Y轴配置</span></span><br><span class="line">  <span class="attr">yAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 下面是构成图表的必须的配置，叫做系列数据</span></span><br><span class="line">  <span class="attr">series</span>: [</span><br><span class="line">    <span class="comment">// 数组中的每一个小对象，就是一个图形</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// data 构成图表的数据</span></span><br><span class="line">      <span class="attr">data</span>: [<span class="number">150</span>, <span class="number">230</span>, <span class="number">224</span>, <span class="number">218</span>, <span class="number">135</span>, <span class="number">147</span>, <span class="number">260</span>],</span><br><span class="line">      <span class="comment">// type 表示图表的类型：（line-折线）（bar-柱状图）（pie-饼图）（map-地图）</span></span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;订单量&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">data</span>: [<span class="number">250</span>, <span class="number">130</span>, <span class="number">124</span>, <span class="number">118</span>, <span class="number">235</span>, <span class="number">247</span>, <span class="number">160</span>],</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;销售额&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">data</span>: [<span class="number">50</span>, <span class="number">30</span>, <span class="number">24</span>, <span class="number">18</span>, <span class="number">35</span>, <span class="number">47</span>, <span class="number">60</span>],</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">      <span class="attr">barWidth</span>: <span class="string">&#x27;60%&#x27;</span>, <span class="comment">// 控制柱子的宽度</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;纯收入&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 颜色配置</span></span><br><span class="line">  <span class="attr">color</span>: [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;linear&#x27;</span>,</span><br><span class="line">    <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">x2</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">y2</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">colorStops</span>: [&#123;</span><br><span class="line">      <span class="attr">offset</span>: <span class="number">0</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> <span class="comment">// 0% 处的颜色</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">offset</span>: <span class="number">1</span>, <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span> <span class="comment">// 100% 处的颜色</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="attr">global</span>: <span class="literal">false</span> <span class="comment">// 缺省为 false</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="comment">// 网格配置（坐标轴这个区域）</span></span><br><span class="line">  <span class="attr">grid</span>: &#123;</span><br><span class="line">    <span class="attr">top</span>: <span class="number">100</span> <span class="comment">// 调整坐标轴区域的位置</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 图例（用于表达 每个图形的意义）</span></span><br><span class="line">  <span class="comment">// 需要series中，每项数据必须定义name名字</span></span><br><span class="line">  <span class="attr">legend</span>: &#123;</span><br><span class="line">    <span class="attr">top</span>: <span class="number">60</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 提示框组件</span></span><br><span class="line">  <span class="attr">tooltip</span>: &#123;</span><br><span class="line">    <span class="comment">// 提示的触发方式</span></span><br><span class="line">    <span class="comment">// 默认是 item，鼠标放到每一项上才能提示</span></span><br><span class="line">    <span class="comment">// 可选 axis ，鼠标放到轴上即可提示</span></span><br><span class="line">    <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>折线图</h1><h2 id="写基础的步骤">写基础的步骤</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ------------------- 折线图 --------------------------------</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">lineChart</span> () &#123;</span><br><span class="line">  <span class="keyword">let</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#line&#x27;</span>))</span><br><span class="line">  <span class="keyword">let</span> option = &#123;&#125;</span><br><span class="line">  myChart.<span class="title function_">setOption</span>(option) <span class="comment">// 第1个O是大写的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">lineChart</span>()</span><br></pre></td></tr></table></figure><h2 id="套用官方示例">套用官方示例</h2><p>官方示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> option = &#123;</span><br><span class="line">  <span class="attr">xAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;Mon&#x27;</span>, <span class="string">&#x27;Tue&#x27;</span>, <span class="string">&#x27;Wed&#x27;</span>, <span class="string">&#x27;Thu&#x27;</span>, <span class="string">&#x27;Fri&#x27;</span>, <span class="string">&#x27;Sat&#x27;</span>, <span class="string">&#x27;Sun&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">yAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">data</span>: [<span class="number">820</span>, <span class="number">932</span>, <span class="number">901</span>, <span class="number">934</span>, <span class="number">1290</span>, <span class="number">1330</span>, <span class="number">1320</span>],</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">      <span class="attr">smooth</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改配置">修改配置</h2><ol><li><p>增加标题（title）</p></li><li><ol><li>标题文本（text）：2022全学科薪资走势</li><li>距离顶部（top）：15</li><li>距离左侧（left）：10</li><li>文字大小（textStyle &gt; fontSize）：16</li></ol></li><li><p>X 轴（xAxis）</p></li><li><ol><li>标签文字（data）：[‘1月’, ‘2月’, ‘3月’, ‘4月’, ‘5月’, ‘6月’, ‘7月’, ‘8月’, ‘9月’, ‘10月’, ‘11月’, ‘12月’]</li><li>标签文字颜色（axisLabel &gt; color）：#999</li><li>轴线颜色（axisLine &gt; lineStyle &gt; color）：#ccc</li><li>轴线类型（axisLine &gt; lineStyle &gt; type）：点划线</li></ol></li><li><p>Y 轴（yAxis）</p></li><li><ol><li>Y 轴分割线类型（（splitLine &gt; lineStyle &gt; type））：点划线</li></ol></li><li><p>鼠标移入提示（tooltip）</p></li><li><ol><li>（trigger: ‘axis’）设置为鼠标移入轴线提示</li></ol></li><li><p>网格（grid）</p></li><li><ol><li>距离顶部：20%</li></ol></li><li><p>颜色（color）</p></li><li><ol><li>渐变颜色，参考链接：<a href="https://echarts.apache.org/zh/option.html#color">https://echarts.apache.org/zh/option.html#color</a></li><li>0%处的颜色：#499FEE</li><li>100%处的颜色：#5D75F0</li></ol></li><li><p>系列数据（series）</p></li><li><ol><li>数据：[9000, 12000, 15000, 13000, 10000, 18000, 14000, 10000, 12000, 13000, 15000, 19000]</li><li>平滑曲线</li><li>线条粗细：6</li><li>拐点空心圆：10</li><li>区域面积渐变：</li></ol></li><li><ol><li><ol><li>0处颜色：#499FEE</li><li>0.8处颜色：rgba(255,255,255,0.2)</li><li>1处颜色：rgba(255,255,255,0)</li><li><strong>渐变色设置参考</strong>：<a href="https://echarts.apache.org/zh/option.html#color">https://echarts.apache.org/zh/option.html#color</a></li></ol></li></ol></li></ol><h1>饼图（右上角）</h1><h2 id="写基础的步骤-2">写基础的步骤</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">classSalaryChart</span> () &#123;</span><br><span class="line">  <span class="keyword">let</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#salary&#x27;</span>))</span><br><span class="line">  <span class="keyword">let</span> option = &#123;&#125;</span><br><span class="line">  myChart.<span class="title function_">setOption</span>(option) <span class="comment">// 第1个O是大写的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">classSalaryChart</span>()</span><br></pre></td></tr></table></figure><h2 id="套用官方示例-2">套用官方示例</h2><p><a href="https://echarts.apache.org/examples/zh/editor.html?c=pie-borderRadius">传送门</a></p><h2 id="修改配置-2">修改配置</h2><ol><li><p>增加标题（title）</p></li><li><ol><li>标题文本：班级薪资分布</li><li>距离顶部：15</li><li>距离左侧：10</li><li>文字大小：16</li></ol></li><li><p>系列数据（series）</p></li><li><ol><li>去掉了 avoidLabelOverlap 和 emphasis 两个配置</li><li>系列数据名 name：班级薪资分布</li><li>环形内外圈半径 radius：[‘50%’, ‘64%’]</li><li>每一项样式 itemStyle（不需要改）：</li></ol></li><li><ol><li><ol><li>边框颜色：#fff</li><li>边框大小：2</li><li>扇形内外圆角半径：10</li></ol></li></ol></li><li><ol><li>文字标签 label（不需要改）：不显示</li><li>视觉引导线 labelLine（不需要改）：不显示</li><li>数据：</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; <span class="attr">value</span>: <span class="number">1048</span>, <span class="attr">name</span>: <span class="string">&#x27;1万以下&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">value</span>: <span class="number">235</span>, <span class="attr">name</span>: <span class="string">&#x27;1万-2万&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">value</span>: <span class="number">580</span>, <span class="attr">name</span>: <span class="string">&#x27;1.5万-2万&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">value</span>: <span class="number">484</span>, <span class="attr">name</span>: <span class="string">&#x27;2万以上&#x27;</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol><li><p>图例（legend）</p></li><li><ol><li>左右居中</li><li>距离<strong>底</strong>部：6%</li></ol></li><li><p>鼠标移入提示（tooltip）（不需要改）</p></li><li><ol><li>鼠标移入每一项上提示</li></ol></li><li><p>颜色（color）</p></li><li><ol><li>[‘#FDA224’, ‘#5097FF’, ‘#3ABCFA’, ‘#34D39A’]</li></ol></li></ol><h1>饼图（左下角）</h1><h2 id="写基础的步骤-3">写基础的步骤</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sexSalaryChart</span> () &#123;</span><br><span class="line">  <span class="keyword">let</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#gender&#x27;</span>))</span><br><span class="line">  <span class="keyword">let</span> option = &#123;&#125;</span><br><span class="line">  myChart.<span class="title function_">setOption</span>(option)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sexSalaryChart</span>()</span><br></pre></td></tr></table></figure><h2 id="复制上一个饼图并修改">复制上一个饼图并修改</h2><p>复制之后</p><ul><li>删除 series中的 itemStyle</li><li>删除 series中的 label</li><li>删除 series中的 baleLine</li><li>复制 series 中的一个小对象，并修改圆心点<ul><li>center: [‘50%’, ‘30%’]            center: [‘50%’, ‘70%’]</li></ul></li><li>删除图例 legend</li></ul><p>标题设置：</p><ul><li>一个标题，使用一个 对象 <code>&#123;&#125;</code> 表示</li><li>多个标题，使用一个 数组 <code>[&#123;标题1&#125;, &#123;标题2&#125;, &#123;标题3&#125;]</code> 表示</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;男女生薪资分布&#x27;</span>,</span><br><span class="line">    <span class="attr">top</span>: <span class="number">15</span>,</span><br><span class="line">    <span class="attr">left</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">textStyle</span>: &#123;</span><br><span class="line">      <span class="attr">fontSize</span>: <span class="number">16</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;男生&#x27;</span>,</span><br><span class="line">    <span class="attr">top</span>: <span class="string">&#x27;50%&#x27;</span>,</span><br><span class="line">    <span class="attr">left</span>: <span class="string">&#x27;45%&#x27;</span>,</span><br><span class="line">    <span class="attr">textStyle</span>: &#123;</span><br><span class="line">      <span class="attr">fontSize</span>: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;女生&#x27;</span>,</span><br><span class="line">    <span class="attr">top</span>: <span class="string">&#x27;85%&#x27;</span>,</span><br><span class="line">    <span class="attr">left</span>: <span class="string">&#x27;45%&#x27;</span>,</span><br><span class="line">    <span class="attr">textStyle</span>: &#123;</span><br><span class="line">      <span class="attr">fontSize</span>: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h1>地图</h1><h2 id="准备工作">准备工作</h2><p>要做地图，除了引入 echarts.min.js 之外，还需要地区的配置文件。</p><p>比如做中国地图，需要引入 china.js 才可以。</p><p>更多地图做法，参考群里的 7 分钟视频。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ------------------- 地图 ----------------------------------</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapChart</span> () &#123;</span><br><span class="line">  <span class="keyword">let</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#map&#x27;</span>))</span><br><span class="line">  <span class="keyword">let</span> option = &#123;</span><br><span class="line">    <span class="comment">// 从 0 开始，自己写配置</span></span><br><span class="line">  &#125;</span><br><span class="line">  myChart.<span class="title function_">setOption</span>(option)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">mapChart</span>()</span><br></pre></td></tr></table></figure><h2 id="配置">配置</h2><h2 id="修改配置-3">修改配置</h2><ol><li><p>标题（title）</p></li><li><ol><li>标题文字：籍贯分布</li><li>距离顶部：10</li><li>距离左边：10</li><li>文字大小：16</li></ol></li><li><p>系列数据（series）</p></li><li><ol><li>系列数据名（name）：籍贯分布</li><li>类型（type: ‘map’） – 表示地图</li><li>map: ‘china’  — 表示使用中国地图（到这一步，就可以显示中国地图了）</li><li>通过 label 设置每个区域（每个省）的名字</li></ol></li><li><ol><li><ol><li>（show: true）显示省的名字</li><li>（fontSize）文字大小：10</li><li>（color）字体颜色：rgba(0,0,0,0.7)</li></ol></li></ol></li><li><ol><li>通过 itemStyle 设置每个区域（每个省）默认的颜色</li></ol></li><li><ol><li><ol><li>borderColor 区域边界线（省界线）颜色：rgba(0, 0, 0, 0.2)</li><li>areaColor 区域颜色：#E0FFFF</li></ol></li></ol></li><li><ol><li>通过 emphasis 设置高亮状态（鼠标移入）的样式</li></ol></li><li><ol><li><ol><li>areaColor 区域颜色：#34D39A</li><li>borderWidth 区域边框（省界线）大小：0</li><li>shadowBlur 阴影模糊大小：20</li><li>shadowOffsetX  shadowOffsetY 阴影偏移：0</li><li>shadowColor 阴影颜色：rgba(0, 0, 0, 0.5)</li></ol></li></ol></li><li><ol><li>使用data设置每个省的数据</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为用地图表示每个省有几名同学</span></span><br><span class="line"><span class="comment">// 所以可以提前准备好数据</span></span><br><span class="line"><span class="keyword">const</span> mapData = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;南海诸岛&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;北京&#x27;</span>, <span class="attr">value</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;天津&#x27;</span>, <span class="attr">value</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;上海&#x27;</span>, <span class="attr">value</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;重庆&#x27;</span>, <span class="attr">value</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;河北&#x27;</span>, <span class="attr">value</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;河南&#x27;</span>, <span class="attr">value</span>: <span class="number">23</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;云南&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;辽宁&#x27;</span>, <span class="attr">value</span>: <span class="number">15</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;黑龙江&#x27;</span>, <span class="attr">value</span>: <span class="number">12</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;湖南&#x27;</span>, <span class="attr">value</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;安徽&#x27;</span>, <span class="attr">value</span>: <span class="number">5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;山东&#x27;</span>, <span class="attr">value</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;新疆&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;江苏&#x27;</span>, <span class="attr">value</span>: <span class="number">5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;浙江&#x27;</span>, <span class="attr">value</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;江西&#x27;</span>, <span class="attr">value</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;湖北&#x27;</span>, <span class="attr">value</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;广西&#x27;</span>, <span class="attr">value</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;甘肃&#x27;</span>, <span class="attr">value</span>: <span class="number">9</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;山西&#x27;</span>, <span class="attr">value</span>: <span class="number">11</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;内蒙古&#x27;</span>, <span class="attr">value</span>: <span class="number">14</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;陕西&#x27;</span>, <span class="attr">value</span>: <span class="number">14</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;吉林&#x27;</span>, <span class="attr">value</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;福建&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;贵州&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;广东&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;青海&#x27;</span>, <span class="attr">value</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;西藏&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;四川&#x27;</span>, <span class="attr">value</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;宁夏&#x27;</span>, <span class="attr">value</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;海南&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;台湾&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;香港&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;澳门&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>​然后series中，通过 data 指定使用这些数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">series</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;map&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">    ... 其他配置略</span><br><span class="line">    <span class="attr">data</span>: mapData   <span class="comment">// 指定数据</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol><li><p>鼠标移入提示（tooltip）</p></li><li><ol><li>鼠标放到每个省的时候，进行提示</li><li>自定义提示的格式为：<code>河北：20 位学员</code> 这样的格式</li><li>提示框边框透明</li><li>提示框背景色：rgba(0,0,0,0.5)</li><li>文字颜色：#fff</li></ol></li><li><p>视觉映射组件（visualMap）</p></li><li><ol><li>视觉映射组件，根据每个区域数据的大小来修改每个区域的颜色</li><li>显示视觉映射组件</li><li>max  min 约定最大值20，最小值0</li><li>text: [20, 0]  视觉映射组件开头和结尾文字也是 20和0</li><li>组件距离左边40，距离下边20</li><li>inRange: { color: [‘’, ‘’] }  从小到大的颜色分别为：#fff 和 #0075F0</li></ol></li></ol><h1>作业：柱状图要求</h1><h2 id="修改配置-4">修改配置</h2><p>网格（grid）</p><ol><li><ol><li>距离左边：70</li><li>距离顶部：30</li><li>距离右边：30</li><li>距离下边：50</li></ol></li></ol><p>X 轴（xAxis）</p><ol><li><ol><li>轴线颜色：#ccc</li><li>轴线类型：点划线</li><li>文字颜色：#999</li></ol></li></ol><p>Y 轴（yAxis）</p><ol><li><ol><li>Y轴分割线：点划线</li></ol></li></ol><p>鼠标移入提示（tooltip）</p><ol><li><ol><li>鼠标移入柱子提示</li></ol></li></ol><p>系列数据（series）</p><ol><li><ol><li>因为有两个柱子，所以需要两份数据</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">series</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">data</span>: [<span class="number">12200</span>, <span class="number">17932</span>, <span class="number">13901</span>, <span class="number">13934</span>, <span class="number">21290</span>, <span class="number">23300</span>, <span class="number">13300</span>, <span class="number">13320</span>],</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;期望薪资&#x27;</span> <span class="comment">// 这个数据的名字，可以在鼠标移入的提示上显示</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">data</span>: [<span class="number">22820</span>, <span class="number">19932</span>, <span class="number">16901</span>, <span class="number">15934</span>, <span class="number">31290</span>, <span class="number">13300</span>, <span class="number">14300</span>, <span class="number">18320</span>],</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;就业薪资&#x27;</span> <span class="comment">// 这个数据的名字，可以在鼠标移入的提示上显示</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>颜色（color）</p><ol><li><ol><li>因为有两个柱子，所以颜色也使用<strong>数组</strong>，并且每一个柱子使用渐变色</li><li>第1个柱子：0处的颜色#34D39A，1处的颜色rgba(52,211,154,0.2)</li><li>第2个柱子：0处的颜色#499FEE，1处的颜色rgba(73,159,238,0.2)</li></ol></li></ol><p>作业：自己做一个自己家乡的地图（做市级地图，参考群里的视频）</p><h1>创建并切换到login</h1><h1>插件</h1><h2 id="val">val()</h2><p>作用一：获取表单各项的值，语法：  <code>let data = val(表单)</code></p><p>作用二：修改的时候，可以做数据回填，语法： <code>val(表单, 数据)</code></p><h2 id="message">message</h2><ul><li>message.success(‘成功的提示’)</li><li>message.error(‘失败的提示’)</li><li>message.confirm(‘标题’, ‘提示内容’, 函数)   ----  删除学员的时候用</li></ul><h1>注册代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册业务：获取输入框的账号、密码，提交给接口即可；</span></span><br><span class="line"><span class="comment">// 如果有问题，则提示一下（比如账号已存在、比如账号太长了、.......）</span></span><br><span class="line"><span class="comment">// 如果注册成功，则跳转到登录页去登录</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn-login&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>()</span><br><span class="line">  <span class="comment">// 使用插件收集表单各项的值</span></span><br><span class="line">  <span class="comment">// let data = val(表单) // val() 函数就会把表单各项的值收集到（要求表单各项必须有name属性）</span></span><br><span class="line">  <span class="keyword">let</span> data = <span class="title function_">val</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>))   <span class="comment">// serialize(表单, &#123; hash: true &#125;)</span></span><br><span class="line">  <span class="comment">// console.log(data) // &#123;username: &#x27;aaa&#x27;, password: &#x27;bbb&#x27;&#125;</span></span><br><span class="line">  <span class="comment">// 简单的验证一下数据格式</span></span><br><span class="line">  <span class="keyword">if</span> (data.<span class="property">username</span>.<span class="property">length</span> &lt; <span class="number">2</span> || data.<span class="property">username</span>.<span class="property">length</span> &gt; <span class="number">30</span>) &#123;</span><br><span class="line">    message.<span class="title function_">error</span>(<span class="string">&#x27;用户名长度应该是2~30位&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (data.<span class="property">password</span>.<span class="property">length</span> &lt; <span class="number">6</span> || data.<span class="property">password</span>.<span class="property">length</span> &gt; <span class="number">30</span>) &#123;</span><br><span class="line">    message.<span class="title function_">error</span>(<span class="string">&#x27;密码长度应该是6~30位&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Ajax把数据提交给接口</span></span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://ajax-api.itheima.net/register&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: data</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 成功后提示</span></span><br><span class="line">    message.<span class="title function_">success</span>(result.<span class="property">data</span>.<span class="property">message</span>) <span class="comment">// 提示注册成功</span></span><br><span class="line">    <span class="comment">// 清空输入框的值</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">reset</span>() <span class="comment">// 重置表单</span></span><br><span class="line">    <span class="comment">// 跳转到登录页</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 等一下，等提示隐藏了再跳转</span></span><br><span class="line">      location.<span class="property">href</span> = <span class="string">&#x27;./login.html&#x27;</span></span><br><span class="line">    &#125;, <span class="number">1500</span>)</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.dir(err)</span></span><br><span class="line">    message.<span class="title function_">error</span>(err.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span>) <span class="comment">// 提示账号已存在</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1>登录功能</h1><p>因为登录的业务逻辑和注册差不多。</p><p>所以，复制上述注册的代码 到 login.html 中。</p><p>并修改以下内容：</p><ul><li>接口地址修改为： <code>http://ajax-api.itheima.net/login</code></li><li>登录成功后，跳转到：<code>location.href = './index.html'</code></li></ul><h1>token的使用</h1><p>具体到代码：</p><ol><li>登录成功之后，存储token</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, result.<span class="property">data</span>.<span class="property">data</span>.<span class="property">token</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>首页请求接口数据的时候，带请求头</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ====================================================================================</span></span><br><span class="line"><span class="comment">// 发送请求，获取接口数据，把数据渲染到页面中，把数据用到图表中</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://ajax-api.itheima.net/dashboard&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="title class_">Authorization</span>: <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1>axios配置请求根路径和请求头</h1><p>axios配置好请求根路径之后，后续所有的请求，都不用写请求根路径了。</p><p>配置语法：<code>axios.defaults.baseURL = 'http://ajax-api.itheima.net'</code></p><p>只要有上述这行代码，后面所有的请求，都不用加 请求根路径了。</p><p>项目中，由于每个html文件，都引入了 common.js 的文件，所以，我们可以选择把 统一的配置，放到 common.js 中。</p><p>同理，也可以全局统一配置请求头，代码如下。</p><p>common.js 中的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面这个代码处理过度动画（默认加上不用管）</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;sidenav-pinned&#x27;</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;ready&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">200</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加入axios的配置</span></span><br><span class="line"><span class="comment">// 配置请求根路径</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://ajax-api.itheima.net&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置请求头</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br></pre></td></tr></table></figure><h1>响应拦截器处理401错误</h1><p>拦截器分为</p><ul><li>请求拦截器</li><li>响应拦截器</li></ul><p>参考地址：<a href="https://www.axios-http.cn/docs/interceptors">https://www.axios-http.cn/docs/interceptors</a></p><p>项目中，如果是token 的问题（不是忘记携带了，就是token过期了），接口都会响应 401 状态码。</p><p>所以，添加响应拦截器，判断响应状态码是否是401，如果是，则跳转到登录。</p><p>在common.js中，<strong>添加</strong>如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 2xx 范围内的状态码都会触发该函数。成功进入这个函数</span></span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 超出 2xx 范围的状态码都会触发该函数。失败进入这个函数</span></span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="comment">// console.dir(error)</span></span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">      <span class="comment">// 说明 token 有问题了（不是忘记携带了，就是token过期了）</span></span><br><span class="line">      location.<span class="property">href</span> = <span class="string">&#x27;./login.html&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1>首页数据处理</h1><h2 id="概览区处理">概览区处理</h2><p>略</p><h2 id="折线图数据处理">折线图数据处理</h2><ul><li>原来 那次 调用函数，注释掉</li><li>等接口响应数据之后，再调用函数，并且传递实参 <code>lineChart(year)</code></li><li>lineChart 函数里面：<ul><li>X轴数据：  data: a.map(item =&gt; item.month)</li><li>series数据：data: a.map(item =&gt; item.salary)</li></ul></li></ul><h2 id="饼图数据处理">饼图数据处理</h2><ul><li>原来 那次 调用函数，注释掉</li><li>等接口响应数据之后，再调用函数，并且传递实参</li><li><ul><li><code>classSalaryChart(salaryData)</code>  – 右上角饼图</li><li><code>sexSalaryChart(salaryData)</code>  – 左下角</li></ul></li><li>classSalaryChart（右上角函数）<ul><li>series中，  data: a.map(item =&gt; {<br>// return { value: 20, name: ‘一万以下’ }<br>return { value: item.g_count + item.b_count, name: item.label }<br>})</li></ul></li><li>sexSalaryChart（左下角函数）<ul><li>series中，data: a.map(item =&gt; {<br>// return { value: 20, name: ‘一万以下’ }<br>return { value: item.g_count, name: item.label }<br>})</li></ul></li></ul><h2 id="柱状图数据处理">柱状图数据处理</h2><ul><li><p>原来 那次 调用函数，注释掉</p></li><li><p>等接口响应数据之后，再调用函数，并且传递实参  <code>groupSalaryChart(groupData)</code></p></li><li><p>默认展示1组数据</p><ul><li>X轴的人名  <code>data: a[1].map(item =&gt; item.name)</code></li><li>series中的两组数据  <code>a[1].map(item =&gt; item.hope_salary)</code>  和  <code>a[1].map(item =&gt; item.salary)</code></li></ul></li><li><p>点击之后，做排他效果</p></li><li><p>点击之后，设置对应组的数据，并重新创建图表</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给柱状图上面的 8 个按钮，注册click事件</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btns&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;BUTTON&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 排他效果</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btns .btn-blue&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;btn-blue&#x27;</span>)</span><br><span class="line">    e.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;btn-blue&#x27;</span>)</span><br><span class="line">    <span class="comment">// echarts更换图表数据的步骤【1. 更换图表中x轴、series数据   2. myChart.setOption(option)重新创建图表即可】</span></span><br><span class="line">    <span class="comment">// 获取组号</span></span><br><span class="line">    <span class="keyword">let</span> i = e.<span class="property">target</span>.<span class="property">innerHTML</span>.<span class="title function_">trim</span>() <span class="comment">// trim()是去掉字符串两边的空白</span></span><br><span class="line">    <span class="comment">// console.log(i) // 组号有了，每组的数据就是  a[i]</span></span><br><span class="line">    <span class="comment">// 换图表配置项中的数据</span></span><br><span class="line">    option.<span class="property">xAxis</span>.<span class="property">data</span> = a[i].<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span>)</span><br><span class="line">    option.<span class="property">series</span>[<span class="number">0</span>].<span class="property">data</span> = a[i].<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">hope_salary</span>)</span><br><span class="line">    option.<span class="property">series</span>[<span class="number">1</span>].<span class="property">data</span> = a[i].<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">salary</span>)</span><br><span class="line"></span><br><span class="line">    myChart.<span class="title function_">setOption</span>(option)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="地图数据处理">地图数据处理</h2><ul><li>原来 那次 调用函数，注释掉</li><li>等接口响应数据之后，再调用函数，并且传递实参  <code>mapChart(provinceData)</code></li><li>函数中，在模板数据（mapData）之后，加入下面的代码即可</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在模板数据、接口返回的数据 之后。融合两部分数据</span></span><br><span class="line">mapData.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断接口返回的数据有没有北京、河北的、内蒙古的</span></span><br><span class="line">  <span class="keyword">let</span> 结果 = a.<span class="title function_">find</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v.<span class="property">name</span>.<span class="title function_">includes</span>(item.<span class="property">name</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// console.log(结果) </span></span><br><span class="line">  <span class="keyword">if</span> (结果) &#123;</span><br><span class="line">    <span class="comment">// item.value = 接口返回的value</span></span><br><span class="line">    item.<span class="property">value</span> = 结果.<span class="property">value</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">🍉知识总结-all</summary>
    
    
    
    <category term="echarts" scheme="https://lwzblog.com/categories/echarts/"/>
    
    
    <category term="echarts" scheme="https://lwzblog.com/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript进阶-4</title>
    <link href="https://lwzblog.com/posts/2043454d.html"/>
    <id>https://lwzblog.com/posts/2043454d.html</id>
    <published>2023-04-12T10:19:03.000Z</published>
    <updated>2023-04-14T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>JavaScript 进阶 - 第4天</h1><h2 id="深浅拷贝">深浅拷贝</h2><h3 id="浅拷贝">浅拷贝</h3><p>浅拷贝：把对象拷贝给一个新的对象，开发中我们经常需要复制一个对象</p><p>如果直接赋值，则复制的是地址，修改任何一个对象，另一个对象都会变化</p><p>常见方法：</p><ol><li>拷贝对象：Object.assgin() / 展开运算符 {…obj} 拷贝对象</li><li>拷贝数组：Array.prototype.concat() 或者 […arr]</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 浅拷贝方法</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 对象拷贝</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   name: &#x27;佩奇&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.1 Object.assign()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const newObj = &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Object.assign(newObj, obj)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// // console.log(newObj)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(newObj === obj)  // false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// newObj.name = &#x27;乔治&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(obj)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(newObj)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.2 展开运算符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const newObj = &#123; ...obj &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(newObj === obj)  // false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// newObj.name = &#x27;乔治&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(obj)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(newObj)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// // 2. 数组拷贝</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const arr = [&#x27;佩奇&#x27;, &#x27;乔治&#x27;]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.1 concat 方法实现数组浅拷贝</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const arr1 = []</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const newArr = arr1.concat(arr)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(newArr)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// newArr[1] = &#x27;猪爸爸&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(arr)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(newArr)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.2 展开运算符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const newArr = [...arr]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(newArr)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// newArr[1] = &#x27;猪爸爸&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(arr)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(newArr)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 浅拷贝的问题如果遇到多层拷贝还是会影响原来的对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">family</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">father</span>: <span class="string">&#x27;猪爸爸&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> newObj = &#123; ...obj &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(newObj)</span></span></span><br><span class="line"><span class="language-javascript">    newObj.<span class="property">family</span>.<span class="property">father</span> = <span class="string">&#x27;dad&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newObj)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>浅拷贝注意：</strong></p><ul><li>如果是基本数据类型拷贝值</li><li>如果是引用数据类型拷贝的是地址</li></ul><p>简单理解：如果是单层对象，没问题，如果有多层就有问题，还是会影响原来对象</p><h3 id="深拷贝">深拷贝</h3><p>深拷贝：拷贝多层，不再拷贝地址</p><p>常见方法：</p><ol><li>通过 JSON 序列化实现</li><li>lodash库 实现</li><li>通过递归实现</li></ol><h4 id="通过JSON序列化实现">通过JSON序列化实现</h4><p>JSON.stringify()  序列化为 JSON 字符串，然后再JSON.parse() 转回对象格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 深拷贝实现方式一：JSON序列化（常用的方式）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   name: &#x27;佩奇&#x27;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   family: &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     father: &#x27;猪爸爸&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &#125;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   hobby: [&#x27;跳泥坑&#x27;, &#x27;唱歌&#x27;]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// // console.log(JSON.stringify(obj))</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// // console.log(JSON.parse(JSON.stringify(obj)))</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const newObj = JSON.parse(JSON.stringify(obj))</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(newObj === obj)  // false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// newObj.family.father = &#x27;dad&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(obj)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(newObj)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注意事项：JSON.stringify序列化的时候会忽略 function undefined</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">love</span>: <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">family</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">father</span>: <span class="string">&#x27;猪爸爸&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">hobby</span>: [<span class="string">&#x27;跳泥坑&#x27;</span>, <span class="string">&#x27;唱歌&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newObj)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>缺点：function 或 undefined等，在序列化过程中会被忽略</p></blockquote><h4 id="js库-lodash实现深拷贝">js库 lodash实现深拷贝</h4><p>官网地址：<a href="https://www.lodashjs.com/">https://www.lodashjs.com/</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入lodash库 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">love</span>: <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">family</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">father</span>: <span class="string">&#x27;猪爸爸&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">hobby</span>: [<span class="string">&#x27;跳泥坑&#x27;</span>, <span class="string">&#x27;唱歌&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// lodash 库实现</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> newObj = _.<span class="title function_">cloneDeep</span>(obj)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(newObj)</span></span></span><br><span class="line"><span class="language-javascript">    newObj.<span class="property">family</span>.<span class="property">father</span> = <span class="string">&#x27;dad&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newObj)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="通过递归实现深拷贝">通过递归实现深拷贝</h4><p>递归：</p><p>所谓递归就是一种函数调用自身的操作</p><ul><li>简单理解:函数内部自己调用自己, 就是递归，这个函数就是递归函数</li><li>递归函数的作用和循环效果类似</li><li>由于递归很容易发生“栈溢出”错误（stackoverflow），所以记得添加退出条件 return</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数自己调用自己，称为递归</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.利用函数递归打印3句话</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> i = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我是第<span class="subst">$&#123;i&#125;</span>句话`</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (i &gt;= <span class="number">3</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">      i++</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">fn</span>()  <span class="comment">// 递归</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fn</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 练习 利用递归函数实现 setTimeout 每隔一秒钟输出当前时间</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>()</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(time)  <span class="comment">// 输出当前时间</span></span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(timer, <span class="number">1000</span>)  <span class="comment">// 函数递归</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">timer</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>深拷贝思路：</p><ol><li>深拷贝的核心是利用函数递归</li><li>封装函数，里面先判断拷贝的是数组还是对象</li><li>然后开始遍历</li><li>如果属性值是引用数据类型（比如数组或者对象），则再次递归函数</li><li>如果属性值是基本数据类型，则直接赋值即可</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 递归实现深拷贝 - 简版实现对象和数组的拷贝</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">family</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">father</span>: <span class="string">&#x27;猪爸爸&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">hobby</span>: [<span class="string">&#x27;跳泥坑&#x27;</span>, <span class="string">&#x27;唱歌&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 封装深拷贝函数 cloneDeep()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">cloneDeep</span>(<span class="params">oldObj</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 先判断拷贝的是数组还是对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> newObj = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(oldObj) ? [] : &#123;&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 遍历拷贝属性和值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> oldObj) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(k)  // k 是属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(oldObj[k])  // oldObj[k] 是属性值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 把旧对象的值给新对象的属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> oldObj[k] === <span class="string">&#x27;object&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 如果属性值是引用数据类型，则需要递归再次拷贝</span></span></span><br><span class="line"><span class="language-javascript">          newObj[k] = <span class="title function_">cloneDeep</span>(oldObj[k])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 否则属性值是基本数据类型，则直接赋值即可</span></span></span><br><span class="line"><span class="language-javascript">          newObj[k] = oldObj[k]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 返回新对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> newObj</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> newObj = <span class="title function_">cloneDeep</span>(obj)</span></span><br><span class="line"><span class="language-javascript">    newObj.<span class="property">family</span>.<span class="property">father</span> = <span class="string">&#x27;dad&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newObj)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj) </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="异常处理">异常处理</h2><blockquote><p>了解 JavaScript 中程序异常处理的方法，提升代码运行的健壮性。</p></blockquote><h3 id="throw">throw</h3><p>异常处理是指预估代码执行过程中可能发生的错误，然后最大程度的避免错误的发生导致整个程序无法继续运行</p><p>总结：</p><ol><li>throw 抛出异常信息，程序也会终止执行</li><li>throw 后面跟的是错误提示信息</li><li>Error 对象配合 throw 使用，能够设置更详细的错误信息</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params">x, y</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(!x || !y) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// throw &#x27;参数不能为空!&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数不能为空!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> x + y</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">counter</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><code>throw</code> 抛出异常信息，程序也会终止执行</li><li><code>throw</code> 后面跟的是错误提示信息</li><li><code>Error</code> 对象配合 <code>throw</code> 使用，能够设置更详细的错误信息</li></ol><h3 id="try-…-catch">try … catch</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 查找 DOM 节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        p.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// try 代码段中执行有错误时，会执行 catch 代码段</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 查看错误信息</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 终止代码继续执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">finally</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&#x27;执行&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;如果出现错误，我的语句不会执行&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">foo</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><code>try...catch</code> 用于捕获错误信息</li><li>将预估可能发生错误的代码写在 <code>try</code> 代码段中</li><li>如果 <code>try</code> 代码段中出现错误后，会执行 <code>catch</code> 代码段，并截获到错误信息</li></ol><h3 id="debugger">debugger</h3><p>相当于断点调试</p><h2 id="处理this">处理this</h2><blockquote><p>了解函数中 this 在不同场景下的默认值，知道动态指定函数 this 值的方法。</p></blockquote><h3 id="改变this">改变this</h3><p>JavaScript 中允许指定（改变）函数中 this 的指向，有 3 个方法可以动态指定普通函数中 this 的指向</p><ul><li>call()</li><li>apply()</li><li>bind()</li></ul><h4 id="call">call</h4><p>使用 <code>call</code> 方法调用函数，同时指定函数中 <code>this</code> 的值，使用方法如下代码所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 改变this指向 - call </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// call() 作用： 第一个调用函数  第二改变this指向</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">x, y</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(x + y)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> x + y</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun</span>()  <span class="comment">// this 指向window</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// fun.call(obj)  //  this 指向 obj 对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// fun.call(obj, 1, 2)  //  this 指向 obj 对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(fun.<span class="title function_">call</span>(obj, <span class="number">1</span>, <span class="number">2</span>))  <span class="comment">// 返回值就是函数 返回值</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. call的应用场景 - 检测数据类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.1 typeof 检测数据类型不够精确的</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&#x27;123&#x27;</span>) <span class="comment">// string</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []) <span class="comment">// object</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>) <span class="comment">// object</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.2 Object.prototype.toString()  返回的结果是[object xxx类型]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(Object.prototype.toString(&#x27;123&#x27;)) //  [object Object]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;123&#x27;</span>))  <span class="comment">// [object String]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">123</span>))  <span class="comment">// [object Number]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]))  <span class="comment">// [object Array]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>))  <span class="comment">// [object Null]</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><code>call</code> 方法能够在调用函数的同时指定 <code>this</code> 的值</li><li>使用 <code>call</code> 方法调用函数时，第1个参数为 <code>this</code> 指定的值</li><li><code>call</code> 方法的其余参数会依次自动传入函数做为函数的参数</li></ol><h4 id="apply">apply</h4><p>使用 <code>call</code> 方法<strong>调用函数</strong>，同时指定函数中 <code>this</code> 的值，使用方法如下代码所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 改变this指向apply </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 基本使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">x, y</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// fun.apply()  // 1. 作用1调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// fun.apply(obj)  // 2. 作用2 改变this指向 obj</span></span></span><br><span class="line"><span class="language-javascript">    fun.<span class="title function_">apply</span>(obj, [<span class="number">1</span>, <span class="number">2</span>])  <span class="comment">// 参数必须是数组</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 使用场景- 求数组的最大值/最小值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))  <span class="comment">// 3</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// apply 或者 call 如果不需要改变this指向 写 null </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>]))  <span class="comment">// 8</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>]))  <span class="comment">// 2</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><code>apply</code> 方法能够在调用函数的同时指定 <code>this</code> 的值</li><li>使用 <code>apply</code> 方法调用函数时，第1个参数为 <code>this</code> 指定的值</li><li><code>apply</code> 方法第2个参数为数组，数组的单元值依次自动传入函数做为函数的参数</li></ol><h4 id="bind">bind</h4><p><code>bind</code> 方法并<strong>不会调用函数</strong>，而是创建一个指定了 <code>this</code> 值的新函数，使用方法如下代码所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;code&quot;</span>&gt;</span>发送验证码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//改变this指向-bind方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 基本使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">x, y, z</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y + z)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// fun()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// fun.bind()  // bind不会调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const fn = fun.bind()  // 返回的是对原来函数的拷贝</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(fn)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(fn === fun)  // false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const fn = fun.bind(obj)  // bind 可以改变this指向</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> fn = fun.<span class="title function_">bind</span>(obj, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment">// </span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fn</span>()  <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 使用场景 - 不需要调用函数，但是又想改变函数内部的this指向</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 发送短信5秒倒计时业务</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> codeBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.code&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> flag = <span class="literal">true</span>  <span class="comment">// 开关变量，用来防止多次点击</span></span></span><br><span class="line"><span class="language-javascript">    codeBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (flag) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.2 利用定时器做倒计时效果 setInterval </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> i = <span class="number">5</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 点击之后立马变化文字</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">innerHTML</span> = <span class="string">`05秒后重新获取`</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定时器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> timerId = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          i--</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">innerHTML</span> = <span class="string">`0<span class="subst">$&#123;i&#125;</span>秒后重新获取`</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 1.3 时间到了 就显示文字为 重新获取</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">innerHTML</span> = <span class="string">`重新获取`</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 停止定时器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearInterval</span>(timerId)</span></span><br><span class="line"><span class="language-javascript">            flag = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 关闭开关 </span></span></span><br><span class="line"><span class="language-javascript">        flag = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：<code>bind</code> 方法创建新的函数，与原函数的唯一的变化是改变了 <code>this</code> 的值。</p><table><thead><tr><th>方法</th><th>相同点</th><th>传递参数</th><th>是否调用函数</th><th>使用场景</th></tr></thead><tbody><tr><td>call</td><td>改变this指向</td><td>传递参数列表  arg1, arg2…</td><td>调用函数</td><td>Object.prototype.toString.call()  检测数据类型</td></tr><tr><td>apply</td><td>改变this指向</td><td>参数是数组</td><td>调用函数</td><td>跟数组相关，比如求数组最大值和最小值等</td></tr><tr><td>bind</td><td>改变this指向</td><td>传递参数列表  arg1, arg2…</td><td>不调用函数</td><td>改变定时器内部的this指向</td></tr></tbody></table><h3 id="this指向">this指向</h3><p>this的取值 不取决于函数的定义，而是取决于怎么调用的（this指向调用者）</p><ul><li>全局内调用： fn()  指向window</li><li>对象内的方法调用：obj.fn()  指向调用对象</li><li>构造函数调用：newPerson()   指向实例对象</li><li>事件处理函数中调用：指向当前触发事件的DOM元素</li><li>特殊调用 比如 call、apply、bind可以改变this指向，fun.call(obj)    指向 obj</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// this指向总结</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 普通函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.1 全局内调用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// window</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fn</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.2 对象内调用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// obj</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    obj.<span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.3 构造函数内this</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> zs = <span class="keyword">new</span> <span class="title class_">Person</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.4 事件处理函数中的this</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.5 特殊调用 call  apply  bind 可以改变this指向</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> o = &#123; <span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    fun.<span class="title function_">call</span>(o)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 箭头函数 没有this，是沿用上一级作用域的this </span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="性能优化">性能优化</h2><h3 id="防抖（debounce）">防抖（debounce）</h3><p>防抖: 单位时间内，频繁触发事件，只执行最后一次</p><p>举个栗子：王者荣耀回城，只要被打断就需要重新来</p><p>使用场景：</p><ul><li>搜索框搜索输入。只需用户最后一次输入完，再发送请求</li><li>手机号、邮箱验证输入检测<br>​</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>利用防抖实现性能优化<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 利用防抖实现性能优化</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//需求： 鼠标在盒子上移动，里面的数字就会变化 + 1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> i = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">mouseMove</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      box.<span class="property">innerHTML</span> = i++</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 如果里面存在大量消耗性能的代码，比如dom操作，比如数据处理，可能造成卡顿</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 添加事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// box.addEventListener(&#x27;mousemove&#x27;, mouseMove)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 利用lodash库实现防抖 - 500毫秒之后采取+1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 语法: _.debounce(fun, 时间)</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, _.<span class="title function_">debounce</span>(mouseMove, <span class="number">500</span>))</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="手写防抖函数">手写防抖函数</h4><p>核心思路：</p><p>防抖的核心就是利用定时器 (setTimeout) 来实现</p><p>①：声明一个定时器变量</p><p>②:  当鼠标每次滑动都先判断是否有定时器了，如果有定时器先清除以前的定时器</p><p>③：如果没有定时器则开启定时器，记得存到变量里面</p><p>④：在定时器里面调用要执行的函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>防抖函数实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 利用防抖实现性能优化</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//需求： 鼠标在盒子上移动，里面的数字就会变化 + 1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> i = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">mouseMove</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      box.<span class="property">innerHTML</span> = i++</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 如果里面存在大量消耗性能的代码，比如dom操作，比如数据处理，可能造成卡顿</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// box.addEventListener(&#x27;mousemove&#x27;, _.debounce(mouseMove, 500))</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 手写防抖函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 核心是利用 setTimeout定时器来实现</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 声明定时器变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 每次鼠标移动（事件触发）的时候都要先判断是否有定时器，如果有先清除以前的定时器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 如果没有定时器，则开启定时器，存入到定时器变量里面</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. 定时器里面写函数调用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, t</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> timer</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// return 返回一个匿名函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.3.4</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer)</span></span><br><span class="line"><span class="language-javascript">        timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">fn</span>()  <span class="comment">// 加小括号调用 fn函数</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, t)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="title function_">debounce</span>(mouseMove, <span class="number">500</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  debounce(mouseMove, 500)  // 调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// debounce(mouseMove, 500)  = function () &#123; 2.3.4&#125;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="节流（throttle）">节流（throttle）</h3><p>节流：单位时间内，频繁触发事件，只执行一次</p><p>举个栗子：</p><ul><li>王者荣耀技能冷却，期间无法继续释放技能</li><li>和平精英 98k 换子弹期间不能射击</li></ul><p>使用场景：</p><ul><li>高频事件:鼠标移动 mousemove、页面尺寸缩放 resize、滚动条滚动scroll 等等</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>利用防抖实现性能优化<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 利用节流实现性能优化</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//需求： 鼠标在盒子上移动，里面的数字就会变化 + 1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> i = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">mouseMove</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      box.<span class="property">innerHTML</span> = i++</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 如果里面存在大量消耗性能的代码，比如dom操作，比如数据处理，可能造成卡顿</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// box.addEventListener(&#x27;mousemove&#x27;, mouseMove)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 利用lodash库实现节流 - 500毫秒之后采取+1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 语法: _.throttle(fun, 时间)</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, _.<span class="title function_">throttle</span>(mouseMove, <span class="number">3000</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="手写节流函数">手写节流函数</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>利用节流实现性能优化<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 利用节流实现性能优化</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//需求： 鼠标在盒子上移动，里面的数字就会变化 + 1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> i = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">mouseMove</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      box.<span class="property">innerHTML</span> = i++</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 如果里面存在大量消耗性能的代码，比如dom操作，比如数据处理，可能造成卡顿</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// box.addEventListener(&#x27;mousemove&#x27;, mouseMove)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 利用lodash库实现节流 -</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 语法: _.throttle(fun, 时间)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// box.addEventListener(&#x27;mousemove&#x27;, _.throttle(mouseMove, 3000))</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 手写一个节流函数- 每隔 500ms + 1</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 节流的核心就是利用定时器(setTimeout) 来实现</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.声明一个定时器变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.当鼠标每次滑动都先判断是否有定时器了，如果有定时器则不开启新定时器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.如果没有定时器则开启定时器，记得存到变量里面</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.1定时器里面调用执行的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.2定时器里面要把定时器清空</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, t</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> timer = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!timer) &#123;</span></span><br><span class="line"><span class="language-javascript">          timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fn</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 清空定时器</span></span></span><br><span class="line"><span class="language-javascript">            timer = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, t)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="title function_">throttle</span>(mouseMove, <span class="number">3000</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>性能优化</th><th>说明</th><th>使用场景</th></tr></thead><tbody><tr><td>防抖</td><td>单位时间内，频繁触发事件，只执行最后一次</td><td>搜索框搜索输入、手机号、邮箱验证输入检测</td></tr><tr><td>节流</td><td>单位时间内，频繁触发事件，只执行一次</td><td>高频事件:鼠标移动 mousemove、页面尺寸缩放 resize、滚动条滚动scroll 等等</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">🥧知识总结4</summary>
    
    
    
    <category term="JavaScript" scheme="https://lwzblog.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lwzblog.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript进阶-3</title>
    <link href="https://lwzblog.com/posts/2043454c.html"/>
    <id>https://lwzblog.com/posts/2043454c.html</id>
    <published>2023-04-11T10:19:03.000Z</published>
    <updated>2023-04-12T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>JavaScript 进阶 - day3</h1><blockquote><p>了解构造函数原型对象的语法特征，掌握 JavaScript 中面向对象编程的实现方式，基于面向对象编程思想实现 DOM 操作的封装。</p></blockquote><ul><li>编程思想</li><li>构造函数</li><li>原型</li><li>综合案例</li></ul><h2 id="编程思想">编程思想</h2><blockquote><p>学习 JavaScript 中基于原型的面向对象编程序的语法实现，理解面向对象编程的特征。</p></blockquote><h3 id="面向过程">面向过程</h3><p>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次</p><p>调用就可以了。</p><h3 id="面向对象">面向对象</h3><p>面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作。</p><p>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工。</p><p>面向对象编程具有灵活、代码可复用、容易维护和开发的优点，更适合多人合作的大型软件项目。</p><p>面向对象的特性：</p><ul><li><p>封装性</p></li><li><p>继承性</p></li><li><p>多态性</p></li></ul><h3 id="编程思想对比">编程思想对比</h3><p><strong>面向过程</strong></p><p>优点：性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程。</p><p>缺点：不灵活、复用性较差</p><p><strong>面向对象</strong></p><p>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护</p><p>缺点：性能比面向过程低</p><blockquote><p>生活离不开蛋炒饭，也离不开盖浇饭，选择不同而已，只不过前端不同于其他语言，面向过程更多</p></blockquote><h2 id="构造函数">构造函数</h2><p>封装是面向对象思想中比较重要的一部分，js面向对象可以通过构造函数实现的封装</p><p>把公共的属性和方法抽取封装到构造函数里面来实现数据的共享，这样创建的实例对象可以使用这些属性和方法了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 构造函数实现封装，封装人的姓名、年龄和 sayHi方法</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">age</span> = age</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi~&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 实例化</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> zs = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;lw&#x27;</span>, <span class="number">18</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> ls = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;wz&#x27;</span>, <span class="number">19</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(zs)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ls)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(zs === ls)  <span class="comment">// false </span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 构造函数实现封装有个小问题</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(zs.<span class="property">sayHi</span> === ls.<span class="property">sayHi</span>)  <span class="comment">// false 两个函数不一样</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>构造函数体现了面向对象的封装特性</li><li>构造函数实例创建的对象彼此独立、互不影响</li></ol><p>封装是面向对象思想中比较重要的一部分，js面向对象可以通过构造函数实现的封装。</p><p>前面我们学过的构造函数方法很好用，但是 存在<code>浪费内存</code>的问题</p><h2 id="原型">原型</h2><h3 id="原型对象-prototype">原型对象-prototype</h3><p>是什么？JavaScript 规定，每一个构造函数都有一个prototype属性，指向另一个对象，所以我们也称为原型对象</p><p><strong>使用场景：</strong></p><p>可以解决：构造函数封装时函数（方法）会多次创建，占用内存的问题</p><p>原型对象可以挂载函数，对象实例化不会多次创建原型对象里面的函数，节约内存</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 构造函数实现封装，封装人的姓名、年龄和 sayHi方法</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">age</span> = age</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.sayHi = function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   console.log(&#x27;hi~&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi~&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)  <span class="comment">// 原型对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 实例化</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> lw = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;lw&#x27;</span>, <span class="number">18</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> wz = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;wz&#x27;</span>, <span class="number">19</span>)</span></span><br><span class="line"><span class="language-javascript">    lw.<span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">    wz.<span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 构造函数实现封装有个小问题</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(zs.<span class="property">sayHi</span> === ls.<span class="property">sayHi</span>)  <span class="comment">//  true</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>构造函数和原型对象中的this 都指向实例化的对象</strong></p><blockquote><ol><li>箭头函数不能做构造函数，因为箭头函数里面没有this</li><li>原型对象里面的函数如果需要用到this，也不要用箭头函数</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 构造函数this指向 实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 原型对象this指向 实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi~&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// 指向实例对象 zs</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> zs = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    zs.<span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="constructor-属性">constructor 属性</h3><p>在哪里？ 每个原型对象里面都有个constructor 属性（constructor 构造函数）</p><p>作用：该属性指向该原型对象的构造函数， 简单理解，就是指向我的爸爸，我是有爸爸的孩子</p><p><strong>使用场景：</strong></p><p>如果有多个对象的方法，我们可以给原型对象采取对象形式赋值.</p><p>但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor 就不再指向当前构造函数了</p><p>此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// constructor属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. constructor属性在原型对象里面</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(Person.prototype)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.  constructor属性 指向原型对象的构造函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Person</span>)  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 有什么使用场景呢？</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Person.prototype.sing = function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&#x27;我会唱歌&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Person.prototype.dance = function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&#x27;我会跳舞&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(Person.prototype)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 手动指定一个constructor 指回构造函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">constructor</span>: <span class="title class_">Person</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">sing</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">dance</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会跳舞&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="原型-2">原型</h3><p>对象都会有一个属性 <strong>proto</strong>  指向构造函数的prototype 原型对象</p><p>之所以我们对象可以使用构造函数 prototype 原型对象的方法，就是因为对象有 <strong>proto</strong> 原型的存在</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 构造函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 实例对象里面有 __proto__ 属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> zs = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(zs)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.  __proto__ 指向原型对象 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(zs.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 注意事项</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.1 prototype 原型对象    __proto__ 原型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.2 __proto__ 非标准属性，在现代浏览器里面显示的是 [[Prototype]] 但是他们是等价的</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.3 __proto__ 尽量不要修改它，否则会影响性能</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><strong>proto</strong> 原先是JS非标准属性，但是 es6 规范中开始标准化， [[prototype]]和__proto__意义相同</li><li>尽量不要修改这个属性，对性能影响非常严重的</li><li>约定： prototype原型对象而  __proto__原型</li></ol><h3 id="原型链">原型链</h3><p>__proto__属性链状结构称为原型链</p><p>作用：原型链为对象成员查找机制提供一个方向，或者说一条路线</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// __proto__属性链状结构称为原型链</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Person构造函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> zs = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    zs.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;实例对象的方法&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// zs.sayHi()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. Person 原型对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Person原型对象的方法&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// zs.sayHi()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. Ojbect 原型对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Object原型对象的方法&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// zs.sayHi()</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. null</span></span></span><br><span class="line"><span class="language-javascript">    zs.<span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(zs.sayHi)  // undefined</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>①当访问一个对象成员(属性/方法)时，首先查找这个对象自身有没有该成员(属性/方法)</p><p>②如果没有就查找它的原型对象（也就是 __proto__指向的 prototype 原型对象）</p><p>③如果还没有就查找原型对象的原型对象（Object的原型对象）</p><p>④依此类推一直找到 Object 为止（null）</p><p>⑤原型链就在于为对象成员查找机制提供一个方向，或者说一条路线</p><h4 id="instanceof-运算符">instanceof 运算符</h4><p>用来检测构造函数.prototype 是否存在于实例对象的原型链上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// instanceof 运算符 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 语法:  实例对象  instanceof  构造函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 作用： 检测构造函数的原型对象是否在实例对象的原型链上</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Person构造函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Person1</span>(<span class="params">name</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> zs = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(zs <span class="keyword">instanceof</span> <span class="title class_">Person</span>)  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(zs <span class="keyword">instanceof</span> <span class="title class_">Person1</span>)  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 数组 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>)  <span class="comment">//  true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Object</span>)  <span class="comment">//  true </span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// __proto__</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">__proto__</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="原型继承">原型继承</h3><p>继承是面向对象编程的另一个特征。龙生龙、凤生凤、老鼠的儿子会打洞描述的正是继承的含义</p><p>有些公共的属性和方法可以写到父级身上，子级通过继承也可以使用这些属性和方法</p><p>JavaScript 中大多是借助原型对象实现继承的特性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 抽取封装 公共的属性和方法  Person构造函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 父级</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">eyes</span> = <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会吃饭&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Person</span>())</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Person</span>() === <span class="keyword">new</span> <span class="title class_">Person</span>())  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Woman</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 继承-借助于原型对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Man</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> zs = <span class="keyword">new</span> <span class="title class_">Man</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(zs)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Woman</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> xl = <span class="keyword">new</span> <span class="title class_">Woman</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(xl)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">baby</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;跑得快&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xl)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(zs)  <span class="comment">// 张三没有baby方法了</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">🥧知识总结3</summary>
    
    
    
    <category term="JavaScript" scheme="https://lwzblog.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lwzblog.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript进阶-2</title>
    <link href="https://lwzblog.com/posts/2043454b.html"/>
    <id>https://lwzblog.com/posts/2043454b.html</id>
    <published>2023-04-10T10:19:03.000Z</published>
    <updated>2023-04-10T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>JavaScript 进阶 - day2</h1><blockquote><p>了解面向对象编程的基础概念及构造函数的作用，体会 JavaScript 一切皆对象的语言特征，掌握常见的对象属性和方法的使用。</p></blockquote><ul><li>深入对象</li><li>内置构造函数</li><li>综合案例</li></ul><h2 id="深入对象">深入对象</h2><blockquote><p>了解面向对象的基础概念，能够利用构造函数创建对象。</p></blockquote><h3 id="创建对象三种方式">创建对象三种方式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 利用字面量创建对象（常用的一种方式）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> o = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 利用 new Object 创建对象 （了解）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const oo = new Object(&#123; name: &#x27;佩奇&#x27; &#125;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> oo = <span class="keyword">new</span> <span class="title class_">Object</span>()</span></span><br><span class="line"><span class="language-javascript">    oo.<span class="property">name</span> = <span class="string">&#x27;佩奇&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oo)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 利用构造函数创建对象</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="构造函数">构造函数</h3><p>**构造函数：**是一种特殊的函数，主要用来创建对象(初始化对象)</p><p>**使用场景：**常规的 {…} 语法允许创建一个对象。比如我们创建了佩奇的对象，继续创建乔治的对象还需要重新写一遍，此时可以通过构造函数来快速创建多个类似的对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 构造函数：是一种特殊的函数，用来创建对象（并完成初始化对象）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 构造函数的2个约定 首字母要大写, 利用new关键字来调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// function Pig() &#123;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(new Pig)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(Pig())</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Pig</span>(<span class="params">name, age, gender</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.name 属性   </span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// name 是形参也就是属性值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">age</span> = age</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// return 123</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> peiqi = <span class="keyword">new</span> <span class="title class_">Pig</span>(<span class="string">&#x27;佩奇&#x27;</span>, <span class="number">6</span>, <span class="string">&#x27;女&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(peiqi)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> qiaozhi = <span class="keyword">new</span> <span class="title class_">Pig</span>(<span class="string">&#x27;乔治&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;男&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(qiaozhi)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 构造函数创建对象说明</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.1 new 关键字 实例化对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.2 如果构造函数没有参数，则可以省略小括号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.3 构造函数里面无需写 return</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.4 new Object()  new Date() 也是在实例化对象</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>使用 new 关键字调用函数的行为被称为实例化</li><li>实例化构造函数时没有参数时可以省略 ()</li><li>构造函数内部无需写return，返回值即为新创建的对象</li><li>newObject（）  new Date（）也是实例化构造函数</li></ol><h4 id="new-实例化过程">new 实例化过程</h4><ol><li>创建新空对象</li><li>构造函数this指向新对象</li><li>执行构造函数代码</li><li>返回新对象</li></ol><h3 id="实例成员-静态成员">实例成员&amp;静态成员</h3><h4 id="实例成员">实例成员</h4><p>实例成员：</p><p>通过构造函数创建的对象称为实例对象，实例对象中的属性和方法称为实例成员(实例属性和实例方法）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 实例成员和静态成员</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 实例成员：实例对象上的属性和方法属于实例成员</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Pig</span>(<span class="params">name</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> peiqi = <span class="keyword">new</span> <span class="title class_">Pig</span>(<span class="string">&#x27;佩奇&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> qiaozhi = <span class="keyword">new</span> <span class="title class_">Pig</span>(<span class="string">&#x27;乔治&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    peiqi.<span class="property">name</span> = <span class="string">&#x27;小猪佩奇&#x27;</span>  <span class="comment">// 实例属性</span></span></span><br><span class="line"><span class="language-javascript">    peiqi.<span class="property">sayHi</span> = <span class="function">() =&gt;</span> &#123;  <span class="comment">// 实例方法</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi~~&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(peiqi)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(qiaozhi)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(peiqi === qiaozhi)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>说明：</p><ol><li><p>为构造函数传入参数，创建结构相同但值不同的对象</p></li><li><p>构造函数创建的实例对象彼此独立互不影响</p></li></ol></blockquote><h4 id="静态成员">静态成员</h4><p>构造函数的属性和方法被称为静态成员（静态属性和静态方法）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 静态成员 ： 构造函数上的属性和方法称为静态成员</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Pig</span>(<span class="params">name</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Pig</span>.<span class="property">eyes</span> = <span class="number">2</span>  <span class="comment">// 静态属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Pig</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">// 静态方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Pig</span>.<span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Pig</span>.<span class="property">eyes</span>)  <span class="comment">// 2</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>静态成员只能构造函数来访问</li><li>静态方法中的this指向构造函数</li></ol><p>比如 Date.now()    Math.PI   Math.random()</p><h3 id="一切皆对象">一切皆对象</h3><p>引用类型:</p><p>Object，Array，RegExp，Date等</p><p>基本数据类型：</p><p>字符串、数值、布尔、undefined、null</p><p>但是，我们会发现有些特殊情况：</p><p>其实字符串、数值、布尔、等基本类型也都有专门的构造函数，这些我们称为包装类型</p><p><strong>包装类型执行过程：</strong></p><ul><li>创建一个 String 类型的实例</li><li>调用实例上的特定方法</li><li>销毁实例</li></ul><p>JS中几乎所有的数据都可以基于构造函数创建，不同的构造器创建出来的数据拥有不同的属性和方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 包装类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const str = &#x27;andy&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(str.length)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 包装过程</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const str = new String(&#x27;andy&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// str.substring()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// str = null </span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内置构造函数">内置构造函数</h2><blockquote><p>掌握各引用类型和包装类型对象属性和方法的使用。</p></blockquote><h3 id="Object">Object</h3><p>Object是内置的构造函数，用于创建普通对象。</p><p>推荐使用字面量方式声明对象，而不是Object构造函数</p><p>学习三个常用静态方法（静态方法就是只有构造函数Object可以调用的）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Object 三种静态方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> o = &#123; <span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span>, <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. Object.keys()  得到对象所有属性（重点） 返回的是数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> key = <span class="title class_">Object</span>.<span class="title function_">keys</span>(o)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. Object.values()  得到对象所有属性值（重点）返回的是数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> value = <span class="title class_">Object</span>.<span class="title function_">values</span>(o)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. Object.assign(目标对象, 源对象)  对象的拷贝   assign 赋值的意思</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> oo = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(oo, o)</span></span><br><span class="line"><span class="language-javascript">    oo.<span class="property">name</span> = <span class="string">&#x27;小猪佩奇&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oo)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.1 注意 拷贝对象之后是两个不同的对象，不会相互影响</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>推荐使用字面量方式声明对象，而不是 <code>Object</code> 构造函数</li><li><code>Object.assign</code> 静态方法创建新的对象</li><li><code>Object.keys</code> 静态方法获取对象中所有属性</li><li><code>Object.values</code> 表态方法获取对象中所有属性值</li></ol><h3 id="Array">Array</h3><p>Array 是内置的构造函数，用于创建数组</p><p>创建数组建议使用字面量创建，不用 Array构造函数创建</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 数组reduce方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// arr.reduce(function(上一次值, 当前值)&#123;&#125;, 初始值)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const arr = [1, 5, 8]</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 没有初始值 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const total = arr.reduce(function (prev, current) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   return prev + current</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(total)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 上一次值    当前值    返回值  (第一次循环)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   1         5         6</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 上一次值    当前值    返回值  (第二次循环)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   6         8        14</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 有初始值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> total = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prev, current</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> prev + current</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">10</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(total)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 上一次值    当前值    返回值  (第一次循环)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   10         1         11</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 上一次值    当前值    返回值  (第二次循环)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   11         5         16</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 上一次值    当前值    返回值  (第三次循环)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   16         8         24</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><p>推荐使用字面量方式声明数组，而不是 <code>Array</code> 构造函数</p></li><li><p>实例方法 <code>forEach</code> 用于遍历数组，替代 <code>for</code> 循环 (重点)</p></li><li><p>实例方法 <code>filter</code> 过滤数组单元值，生成新数组(重点)</p></li><li><p>实例方法 <code>map</code> 迭代原数组，生成新数组(重点)</p></li><li><p>实例方法 <code>join</code> 数组元素拼接为字符串，返回字符串(重点)</p></li><li><p>实例方法  <code>find</code>  查找元素， 返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回 undefined(重点)</p></li><li><p>实例方法<code>every</code> 检测数组所有元素是否都符合指定条件，如果<strong>所有元素</strong>都通过检测返回 true，否则返回 false(重点)</p></li><li><p>实例方法<code>some</code> 检测数组中的元素是否满足指定条件   <strong>如果数组中有</strong>元素满足条件返回 true，否则返回 false</p></li><li><p>实例方法 <code>concat</code>  合并两个数组，返回生成新数组</p></li><li><p>实例方法 <code>sort</code> 对原数组单元值排序</p></li><li><p>实例方法 <code>splice</code> 删除或替换原数组单元</p></li><li><p>实例方法 <code>reverse</code> 反转数组</p></li><li><p>实例方法 <code>findIndex</code>  查找元素的索引值</p></li></ol><h3 id="String">String</h3><p><code>String</code> 是内置的构造函数，用于创建字符串。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 字符串方法split </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> str = <span class="string">&#x27;ll维维zz&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. split(&#x27;分隔符&#x27;)  把字符串转换为数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> str1 = <span class="string">&#x27;小米,华为,苹果&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. join(&#x27;分隔符&#x27;)可以把数组转换为字符串</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 把传智播客这字符串做一个翻转 变成 客播智传</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 把字符串转换为数组， 数组里面reverse翻转，再把数组转换为字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>())</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>实例属性 <code>length</code> 用来获取字符串的度长(重点)</li><li>实例方法 <code>split('分隔符')</code> 用来将字符串拆分成数组(重点)</li><li>实例方法 <code>substring（需要截取的第一个字符的索引[,结束的索引号]）</code> 用于字符串截取(重点)</li><li>实例方法 <code>startsWith(检测字符串[, 检测位置索引号])</code> 检测是否以某字符开头(重点)</li><li>实例方法 <code>includes(搜索的字符串[, 检测位置索引号])</code> 判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false(重点)</li><li>实例方法 <code>toUpperCase</code> 用于将字母转换成大写</li><li>实例方法 <code>toLowerCase</code> 用于将就转换成小写</li><li>实例方法 <code>indexOf</code>  检测是否包含某字符</li><li>实例方法 <code>endsWith</code> 检测是否以某字符结尾</li><li>实例方法 <code>replace</code> 用于替换字符串，支持正则匹配</li><li>实例方法 <code>match</code> 用于查找字符串，支持正则匹配</li></ol><p>注：String 也可以当做普通函数使用，这时它的作用是强制转换成字符串数据类型。</p><h3 id="Number">Number</h3><p><code>Number</code> 是内置的构造函数，用于创建数值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 数字 toFixed 方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> num = <span class="number">12.345</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toFixed</span>(<span class="number">2</span>))  <span class="comment">// 12.35</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toFixed</span>(<span class="number">1</span>))  <span class="comment">// 12.3</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> num1 = <span class="number">12</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num1.<span class="title function_">toFixed</span>(<span class="number">2</span>))  <span class="comment">// 12.00</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>推荐使用字面量方式声明数值，而不是 <code>Number</code> 构造函数</li><li>实例方法 <code>toFixed</code> 用于设置保留小数位的长度</li></ol>]]></content>
    
    
    <summary type="html">🥧知识总结2</summary>
    
    
    
    <category term="JavaScript" scheme="https://lwzblog.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lwzblog.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript进阶-1</title>
    <link href="https://lwzblog.com/posts/2043454a.html"/>
    <id>https://lwzblog.com/posts/2043454a.html</id>
    <published>2023-04-09T10:19:03.000Z</published>
    <updated>2023-04-10T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>JavaScript 进阶 - day1</h1><blockquote><p>学习作用域、变量提升、闭包等语言特征，加深对 JavaScript 的理解，掌握变量赋值、函数声明的简洁语法，降低代码的冗余度。</p></blockquote><ul><li>作用域</li><li>函数进阶</li><li>解构赋值</li><li>综合案例</li></ul><h2 id="作用域">作用域</h2><blockquote><p>了解作用域对程序执行的影响及作用域链的查找机制，使用闭包函数创建隔离作用域避免全局变量污染。</p></blockquote><p>作用域（scope）规定了变量能够被访问的“范围”，离开了这个“范围”变量便不能被访问，作用域分为全局作用域和局部作用域。</p><h3 id="局部作用域">局部作用域</h3><p>局部作用域分为函数作用域和块作用域。</p><h4 id="函数作用域">函数作用域</h4><p>在函数内部声明的变量只能在函数内部被访问，外部无法直接访问。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 声明 counter 函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params">x, y</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数内部声明的变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> s = x + y</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s) <span class="comment">// 18</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 设用 counter 函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">counter</span>(<span class="number">10</span>, <span class="number">8</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 访问变量 s</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)<span class="comment">// 报错</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>函数内部声明的变量，在函数外部无法被访问</li><li>函数的参数也是函数内部的局部变量</li><li>不同函数内部声明的变量无法互相访问</li></ol><h4 id="块作用域">块作用域</h4><p>在 JavaScript 中使用 <code>&#123;&#125;</code> 包裹的代码称为代码块，代码块内部声明的变量外部将【有可能】无法被访问。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// age 只能在该代码块中被访问</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age = <span class="number">18</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 正常</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 超出了 age 的作用域</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// 报错</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span>(flag) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// str 只能在该代码块中被访问</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;hello world!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// 正常</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 超出了 age 的作用域</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// 报错</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span>(<span class="keyword">let</span> t = <span class="number">1</span>; t &lt;= <span class="number">6</span>; t++) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// t 只能在该代码块中被访问</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t); <span class="comment">// 正常</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 超出了 t 的作用域</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(t); <span class="comment">// 报错</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><code>let</code> 声明的变量会产生块作用域，<code>var</code> 不会产生块作用域</li><li><code>const</code> 声明的常量也会产生块作用域</li><li>不同代码块之间的变量无法互相访问</li><li>推荐使用 <code>let</code> 或 <code>const</code></li></ol><h3 id="全局作用域">全局作用域</h3><p><code>&lt;script&gt;</code> 标签和 <code>.js</code> 文件的【最外层】就是所谓的全局作用域，在此声明的变量在函数内部也可以被访问。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 此处是全局</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此处为局部</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 此处为全局</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>全局作用域中声明的变量，任何其它作用域都可以被访问，如下代码所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 全局变量 name</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> name = <span class="string">&#x27;lwz&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 函数作用域中访问全局</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 此处为局部</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span> + name)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 全局变量 flag 和 x</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> flag = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> x = <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 块作用域中访问全局</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(flag) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> y = <span class="number">5</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y) <span class="comment">// x 是全局的</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>为 <code>window</code> 对象动态添加的属性默认也是全局的，不推荐！</li><li>函数中未使用任何关键字声明的变量为全局变量，不推荐！！！</li><li>尽可能少的声明全局变量，防止全局变量被污染</li></ol><p>JavaScript 中的作用域是程序被执行时的底层机制，了解这一机制有助于规范代码书写习惯，避免因作用域导致的语法错误。</p><h3 id="作用域链">作用域链</h3><p>嵌套关系的作用域串联起来形成了作用域链</p><p>**作用：**作用域链本质上是底层的变量查找机制（就近原则）</p><ul><li>在函数被执行时，会优先查找当前函数作用域中查找变量</li><li>如果当前作用域查找不到则会逐级向上查找父级作用域直到全局作用域</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 全局作用域</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let a = 11</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> b = <span class="number">22</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 局部作用域</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// let a = 1</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 局部作用域</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// a = 2</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">// ?</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">g</span>() <span class="comment">// 调用g</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">f</span>() <span class="comment">// 调用 f</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>1.嵌套关系的作用域串联起来形成了作用域链</p><p>2.查找规则：就近原则</p><ul><li>当前作用域用找不到，则会逐级查找父级作用域直到全局作用域</li><li>都找不到则提示错误，这个变量没有被定义过</li></ul><p>3.子作用域能够访问父作用域，父级作用域无法访问子级作用域</p><h3 id="垃圾回收机制">垃圾回收机制</h3><p>垃圾回收机制(Garbage Collection)  简称 GC</p><p>JS中内存的分配和回收都是自动完成的，内存在不使用的时候会被垃圾回收器自动回收</p><p><strong>内存的生命周期</strong></p><p>JS环境中分配的内存, 一般有如下生命周期：</p><p>1.内存分配：当我们声明变量、函数、对象的时候，系统会自动为他们分配内存</p><p>2.内存使用：即读写内存，也就是使用变量、函数等</p><p>3.内存回收：使用完毕，由垃圾回收器自动回收不再使用的内存</p><p><strong>说明：</strong></p><ul><li>全局变量一般不会回收(关闭页面回收)</li><li>一般情况下局部变量的值, 不用了, 会被自动回收掉</li></ul><p>**内存泄漏：**程序中分配的内存由于某种原因程序未释放或无法释放叫做内存泄漏</p><h3 id="闭包">闭包</h3><p>**概念：**一个函数对周围状态的引用捆绑在一起，闭包让开发者可以从内部函数访问外部函数的作用域</p><blockquote><p>简单理解：闭包 =  内层函数 + 外层函数的变量</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 闭包 : 内层函数 + 外层函数变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// function outer() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   const a = 1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   function f() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     console.log(a)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   f()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// outer()</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 闭包的应用： 实现数据的私有。统计函数的调用次数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let count = 1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// function fn() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   count++</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(`函数被调用$&#123;count&#125;次`)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 闭包的写法  统计函数的调用次数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> count = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        count++</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`函数被调用<span class="subst">$&#123;count&#125;</span>次`</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> fn</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> re = <span class="title function_">outer</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const re = function fn() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   count++</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(`函数被调用$&#123;count&#125;次`)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">re</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">re</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const fn = function() &#123; &#125;  函数表达式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. 闭包存在的问题： 可能会造成内存泄漏</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>1.怎么理解闭包？</p><ul><li>闭包 = 内层函数 + 外层函数的变量</li></ul><p>2.闭包的作用？</p><ul><li>封闭数据，实现数据私有，外部也可以访问函数内部的变量</li><li>闭包很有用，因为它允许将函数与其所操作的某些数据（环境）关联起来</li></ul><p>3.闭包可能引起的问题？</p><ul><li>内存泄漏</li></ul><h3 id="变量提升">变量提升</h3><p>变量提升是 JavaScript 中比较“奇怪”的现象，它允许在变量声明之前即被访问（仅存在于var声明变量）</p><p><strong>说明：</strong></p><ol><li><p>变量提升出现在当前作用域的最前面</p></li><li><p>提升时，只提升变量声明，不提升变量赋值</p></li><li><p>let/const 声明的变量不存在变量提升</p></li><li><p>实际开发中推荐先声明再访问变量</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> age</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var变量提升</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 变量提升会提升到当前作用域的最前面</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 只提升变量声明，不提升变量赋值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// ?</span></span></span><br><span class="line"><span class="language-javascript">    age = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// ?</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> uname</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(uname)</span></span><br><span class="line"><span class="language-javascript">      uname = <span class="string">&#x27;andy&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fn</span>()</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>JS初学者经常花很多时间才能习惯变量提升，还经常出现一些意想不到的bug，正因为如此，ES6 引入了块级作用域，用let或者const声明变量，让代码写法更加规范和人性化。</p></blockquote><p>注：关于变量提升的原理分析会涉及较为复杂的词法分析等知识，而开发中使用 <code>let</code> 可以轻松规避变量的提升，因此在此不做过多的探讨，有兴趣可<a href="https://segmentfault.com/a/1190000013915935">查阅资料</a>。</p><h2 id="函数">函数</h2><blockquote><p>知道函数参数默认值、动态参数、剩余参数的使用细节，提升函数应用的灵活度，知道箭头函数的语法及与普通函数的差异。</p></blockquote><h3 id="函数提升">函数提升</h3><p>函数提升与变量提升比较类似。</p><p>说明：</p><ol><li>函数提升提升到当前作用域最前面</li><li>函数提升只提升声明，不提升调用</li><li>函数表达式不存在提升的现象</li><li>函数提升能够使函数的声明调用更灵活</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数提升&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> fun</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数提升</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.函数提升提升到当前作用域最前面</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.函数提升只提升声明，不提升调用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.函数表达式不存在提升的现象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4.函数提升能够使函数的声明调用更灵活</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fn</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun</span>()</span></span><br><span class="line"><span class="language-javascript">    fun = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数表达式不存在提升&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun</span>()</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="函数参数">函数参数</h3><h4 id="arguments对象（了解）">arguments对象（了解）</h4><p><code>arguments</code> 是函数内部内置的伪数组变量，它包含了调用函数时传入的所有实参。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// arguments对象获取所有实参</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1. arguments 只存在于函数中 伪数组</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. arguments 可以得到传递过来的所有实参 [1, 2]</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(arguments)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> sum = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        sum += <span class="variable language_">arguments</span>[i]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(arguments) 外面无法使用</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>arguments是一个伪数组，只存在于函数中</li><li>arguments的作用是动态获取函数的实参</li><li>可以通过for循环依次得到传递过来的实参</li></ol><h4 id="剩余参数">剩余参数</h4><p><strong>剩余参数:</strong>  允许我们将一个不定数量的参数表示为一个数组</p><p>**简单理解：**用于获取多余的实参，并形成一个真数组</p><p><strong>使用场景：</strong></p><p>也可以解决形参和实参个数不匹配的问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 剩余参数获得多余的实参 返回真数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// function sum(x, y, ...other) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(x, y, other)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// sum(1, 2)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// sum(1, 2, 3)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// sum(1, 2, 3, 4)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 求和效果</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...other</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(other)  // [1, 2, 3, 4]</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> sum = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">      other.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">ele</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        sum += ele</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>剩余参数和arguments区别</strong></p><ol><li>… 是语法符号，置于最末函数形参之前，用于获取多余的实参</li><li>借助 … 获取的剩余实参，是个真数组</li><li>箭头函数不支持arguments，但是可以使用剩余参数</li></ol><p>开发中，还是提倡多使用 剩余参数</p><h4 id="展开运算符-…">展开运算符(…)</h4><p>展开运算符,将一个数组/对象进行展开</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 展开运算符：将一个数组/对象进行展开，咱们先讲展开数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 基本使用, 不修改原数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(...arr)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2. 使用场景： 求数组最大值/最小值，数组合并</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(Math.max(1, 3, 8))</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr))  <span class="comment">// 3</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(...arr))  <span class="comment">// 1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log([arr1, arr2])</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>([...arr1, ...arr2])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>剩余参数：函数参数使用，把多个元素收集起来生成一个真数组 （凝聚）</p><p>展开运算符：将数组展开成各个元素（拆散）</p></blockquote><h3 id="箭头函数">箭头函数</h3><p>箭头函数比函数表达式更简洁的一种写法</p><p>使用场景：箭头函数更适用于那些本来需要匿名函数的地方，写法更简单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 箭头函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 基本语法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const fn = function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&#x27;我是函数表达式&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// fn()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const fn = () =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&#x27;我是箭头函数&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// fn()</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 细节使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.1 如果只有一个形参则可以省略小括号,其余个数不能省略，如果没有参数则写空的小括号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const sum = (x) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(x + x)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// sum(2)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const sum = x =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(x + x)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// sum(2)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.2 如果函数体只有一句代码，则可以省略大括号，这句代码就是返回值（省略return）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const sum = x =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   return x + x</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const sum = x =&gt; x + x</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(sum(5))</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.3 如果返回的是一个对象，则需要用小括号把对象包裹起来</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const fn = function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   return &#123;name: &#x27;佩奇&#x27;&#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const fn = () =&gt; (&#123; name: &#x27;佩奇&#x27; &#125;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(fn())</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.4 箭头函数里面没有 arguments，但是有剩余参数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">...other</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(arguments)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(other)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>用法细节：</strong></p><ol><li>当箭头函数只有一个参数时，可以省略参数的小括号，其余个数不能省略（没有参数也需要写小括号）</li><li>当箭头函数的函数体只有一句代码 可以省略函数体大括号，这句代码就是返回值（可以不用写return）</li><li>如果返回的是个对象，则需要把对象用小括号包裹</li><li>箭头函数里面没有arguments，但是有剩余参数</li></ol><p>总结：</p><ol><li>箭头函数属于表达式函数，因此不存在函数提升</li><li>箭头函数只有一个参数时可以省略圆括号 <code>()</code></li><li>箭头函数函数体只有一行代码时可以省略花括号 <code>&#123;&#125;</code>，并自动做为返回值被返回</li><li>箭头函数中没有 <code>arguments</code>，只能使用 <code>...</code> 动态获取实参</li></ol><h4 id="箭头函数中的this">箭头函数中的this</h4><p>以前函数中的this指向是根据如何调用来确定的。简单理解就是this指向调用者</p><p>箭头函数本身没有this,它只会沿用上一层作用域的this</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>5秒后启用<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 以前this的指向：  指向调用者</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(this)  // window</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// // 普通函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// function fn() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(this)  // window</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// window.fn()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// // 对象方法里面的this</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   name: &#x27;andy&#x27;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   sayHi: function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     console.log(this)  // obj</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// obj.sayHi()</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 箭头函数的中this指向-沿用上一层作用域的this </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// window</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fn</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   name: &#x27;andy&#x27;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   sayHi: () =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     console.log(this)  // window</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// obj.sayHi()</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="title function_">fun</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// obj </span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fun</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    obj.<span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 我们可以根据需求来选择是否使用箭头函数 this</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// document.querySelector(&#x27;.btn1&#x27;).addEventListener(&#x27;click&#x27;, function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   this.style.color = &#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn1&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.style.color = &#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 此处不能用 this 指向 Window不是 按钮了</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn1&#x27;</span>).<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn2&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// setTimeout(function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   console.log(this) //  定时器里面的this 指向 window </span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   this.disabled = false</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;, 5000)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//  </span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">5000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ES6对象简写">ES6对象简写</h3><ol><li>在对象中，如果属性名和属性值一致，可以简写只写属性名即可</li><li>在对象中，方法（函数）可以简写</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  密　码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ES6对象属性和方法的简写</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 对象属性的简写 (点击按钮生成对象)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> username = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.username&#x27;</span>).<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> password = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.password&#x27;</span>).<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// const obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   username: username,</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   password: password</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 属性名和属性值相同的时候，可以只写属性名</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. 对象方法的简写</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// const obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   username,</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   password,</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   sayHi: function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     console.log(&#x27;hi~&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">        username,</span></span><br><span class="line"><span class="language-javascript">        password,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi~&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="解构赋值">解构赋值</h2><blockquote><p>知道解构的语法及分类，使用解构简洁语法快速为变量赋值。</p></blockquote><p>解构赋值：可以将数组中的值或对象的属性取出，赋值给其他变量</p><p>解构：其实就是把一个事物的结构进行拆解</p><h3 id="数组解构">数组解构</h3><p>基本语法：</p><ol><li>右侧数组的值将被赋值给左侧的变量</li><li>变量的顺序对应数组值的位置依次进行赋值操作</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 数组解构</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 基本语法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 典型的使用场景  交换2个变量的值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> x = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> y = <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">    [y, x] = [x, y]</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. js 2个特殊情况需要加分号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.1 如果是小括号开头的则需要加分号</span></span></span><br><span class="line"><span class="language-javascript">    (<span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;)();</span></span><br><span class="line"><span class="language-javascript">    (<span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;)();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.2 如果是中括号开头的则需要加分号</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>变量和值不匹配的情况</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 数组解构变量和值不匹配的情况</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 变量多，值少的情况</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const [a, b, c, d] = [&#x27;小米&#x27;, &#x27;华为&#x27;, &#x27;苹果&#x27;]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(a)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(b)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(c)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(d) // undefined</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 防止undefined传值，可以设置默认值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const [a, b, c, d = &#x27;三星&#x27;] = [&#x27;小米&#x27;, &#x27;华为&#x27;, &#x27;苹果&#x27;]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(a)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(b)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(c)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(d)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 变量少，值多的情况</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const [a, b] = [&#x27;小米&#x27;, &#x27;华为&#x27;, &#x27;苹果&#x27;]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(a)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(b)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. 利用剩余参数解决变量少值多的情况</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const [a, ...b] = [&#x27;小米&#x27;, &#x27;华为&#x27;, &#x27;苹果&#x27;]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(a)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(b)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 5. 按需导入，忽略某些值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> [a, , c, d] = [<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;华为&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;vivo&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(d)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="对象解构">对象解构</h3><p>对象解构赋值：可以将对象的属性取出，赋值给其他变量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> username = <span class="string">&#x27;andy&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> user = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">username</span>: <span class="string">&#x27;lwz&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 对象解构赋值基本使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const &#123; username, age, gender &#125; = user</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(username)  // 小明</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(age)  // 18</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(gender)  // undefined</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.1 要求变量名和属性名必须一致</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.2 如果变量名和属性名不一致，则默认为 undefined</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.3 变量名不要和外面的变量名冲突，否则会报错</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 更改解构变量名（重命名）  变量名: 新变量名</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const &#123; username: uname, age &#125; = user</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(uname)  // 小明</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(age)  // 18</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 对象数组解构</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> arr = [</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>: <span class="string">&#x27;lwz&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> [&#123; <span class="attr">username</span>: uname, age &#125;] = arr</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(uname)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：支持多维解构赋值</p><h2 id="综合案例">综合案例</h2><h3 id="filter遍历数组">filter遍历数组</h3><p>filter() 方法创建一个新的数组，新数组中的元素是符合条件的所有元素</p><p>主要使用场景： 筛选数组符合条件的元素，并返回筛选之后元素的新数组，不影响原数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// filter 筛选数组元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const newArr = arr.filter(function (ele, index) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   // console.log(ele)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   // console.log(index)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   // return 筛选条件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   return ele &gt;= 30</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   // return ele + 30 都是真的所以都选出来了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> newArr = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">ele</span> =&gt;</span> ele &gt;= <span class="number">30</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.那些无法由根部出发触及到的对象被标记为不再使用，稍后进行回收。</p>]]></content>
    
    
    <summary type="html">🥧知识总结1</summary>
    
    
    
    <category term="JavaScript" scheme="https://lwzblog.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lwzblog.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>webAPIs-6</title>
    <link href="https://lwzblog.com/posts/2043412f.html"/>
    <id>https://lwzblog.com/posts/2043412f.html</id>
    <published>2023-04-06T10:19:03.000Z</published>
    <updated>2023-04-07T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Web APIs -day6</h1><blockquote><p>目标：能够利用正则表达式完成小兔鲜注册页面的表单验证，具备常见的表单验证能力</p></blockquote><ul><li>正则表达式</li><li>综合案例</li><li>阶段案例</li></ul><h2 id="正则表达式">正则表达式</h2><p><strong>正则表达式</strong>（Regular Expression）是一种字符串匹配的模式（规则）</p><p><strong>使用场景：</strong></p><ul><li>例如验证表单：手机号表单要求用户只能输入11位的数字 (匹配)</li><li>过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等</li></ul><h3 id="正则基本使用">正则基本使用</h3><ol><li><p>定义规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg =  <span class="regexp">/表达式/</span></span><br></pre></td></tr></table></figure><ul><li>其中<code>/   /</code>是正则表达式字面量</li><li>正则表达式也是<code>对象 </code></li></ul></li><li><p>使用正则</p><ul><li><code>test()方法</code>   用来查看正则表达式与指定的字符串是否匹配</li><li>如果正则表达式与指定的字符串匹配 ，返回<code>true</code>，否则<code>false</code></li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 正则表达式的基本使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> str = <span class="string">&#x27;web前端开发&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 定义规则</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg = <span class="regexp">/web/</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 使用正则  test()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str))  <span class="comment">// true  如果符合规则匹配上则返回true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;java开发&#x27;</span>))  <span class="comment">// false  如果不符合规则匹配上则返回 false</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="元字符">元字符</h3><ol><li><strong>普通字符:</strong></li></ol><ul><li>大多数的字符仅能够描述它们本身，这些字符称作普通字符，例如所有的字母和数字。</li><li>普通字符只能够匹配字符串中与它们相同的字符。</li><li>比如，规定用户只能输入英文26个英文字母，普通字符的话  /[abcdefghijklmnopqrstuvwxyz]/</li></ul><ol start="2"><li><strong>元字符(特殊字符）</strong></li></ol><ul><li>是一些具有特殊含义的字符，可以极大提高了灵活性和强大的匹配功能。</li><li>比如，规定用户只能输入英文26个英文字母，换成元字符写法： /[a-z]/</li></ul><h4 id="边界符">边界符</h4><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p><blockquote><p>如果 ^ 和 $ 在一起，表示必须是精确匹配</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 元字符之边界符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 匹配开头的位置 ^</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg = <span class="regexp">/^web/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;weblwz&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;前端weblwz&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;前端web学习lwz&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;welwz&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 匹配结束的位置 $</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg1 = <span class="regexp">/web$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;web前端lwz&#x27;</span>))  <span class="comment">//  false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;前端lwzweb&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;前端web学习lwz&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;welwz&#x27;</span>))  <span class="comment">// false  </span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 精确匹配 ^ $</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg2 = <span class="regexp">/^web$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;web前端lwz&#x27;</span>))  <span class="comment">//  false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;前端weblwz&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;前端web学习lwz&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;welwz&#x27;</span>))  <span class="comment">// false </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;web&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;webweblwz&#x27;</span>))  <span class="comment">// flase </span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="量词">量词</h4><p>量词用来设定某个模式重复次数</p><blockquote><p>注意： 逗号左右两侧千万不要出现空格</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 元字符之量词</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. * 重复次数 &gt;= 0 次</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg1 = <span class="regexp">/^w*$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;w&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;ww&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. + 重复次数 &gt;= 1 次</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg2 = <span class="regexp">/^w+$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;w&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;ww&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. ? 重复次数  0 || 1 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg3 = <span class="regexp">/^w?$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&#x27;w&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&#x27;ww&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. &#123;n&#125; 重复 n 次</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg4 = <span class="regexp">/^w&#123;3&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;w&#x27;</span>))  <span class="comment">// flase</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;ww&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;www&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;wwww&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 5. &#123;n,&#125; 重复次数 &gt;= n </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg5 = <span class="regexp">/^w&#123;2,&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&#x27;w&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&#x27;ww&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&#x27;www&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 6. &#123;n,m&#125;   n =&lt; 重复次数 &lt;= m</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg6 = <span class="regexp">/^w&#123;2,4&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg6.<span class="title function_">test</span>(<span class="string">&#x27;w&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg6.<span class="title function_">test</span>(<span class="string">&#x27;ww&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg6.<span class="title function_">test</span>(<span class="string">&#x27;www&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg6.<span class="title function_">test</span>(<span class="string">&#x27;wwww&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg6.<span class="title function_">test</span>(<span class="string">&#x27;wwwww&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 7. 注意事项： 逗号两侧千万不要加空格否则会匹配失败</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="范围">范围</h4><p>表示字符的范围，定义的规则限定在某个范围，比如只能是英文字母，或者数字等等，用表示范围</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 元字符之范围  []  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. [abc] 匹配包含的单个字符， 多选1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg1 = <span class="regexp">/^[abc]$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;b&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;c&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;d&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;ab&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. [a-z] 连字符 单个</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg2 = <span class="regexp">/^[a-z]$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;p&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;0&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;A&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 想要包含小写字母，大写字母 ，数字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg3 = <span class="regexp">/^[a-zA-Z0-9]$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&#x27;B&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&#x27;b&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="number">9</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&#x27;,&#x27;</span>))  <span class="comment">// flase</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 用户名可以输入英文字母，数字，可以加下划线，要求 6~16位</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg4 = <span class="regexp">/^[a-zA-Z0-9_]&#123;6,16&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;abcd1&#x27;</span>))  <span class="comment">// false </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;abcd12&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;ABcd12&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;ABcd12_&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. [^a-z] 取反符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reg5 = <span class="regexp">/^[^a-z]$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>))  <span class="comment">// false </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&#x27;A&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="number">8</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="替换和修饰符">替换和修饰符</h2><p>replace 替换方法，可以完成字符的替换</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 替换和修饰符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> str = <span class="string">&#x27;lwz正在学习前端，立志都成为前端大神&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 替换  replace  需求：把前端替换为 web</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.1 replace 返回值是替换完毕的字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const strEnd = str.replace(/前端/, &#x27;web&#x27;) 只能替换一个</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修饰符约束正则执行的某些细节行为，如是否区分大小写、是否支持多行匹配等</p><ul><li>i 是单词 ignore 的缩写，正则匹配时字母不区分大小写</li><li>g 是单词 global 的缩写，匹配所有满足正则表达式的结果</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 替换和修饰符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> str = <span class="string">&#x27;lwz正在学习前端，立志都成为前端大神&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 替换  replace  需求：把前端替换为 web</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.1 replace 返回值是替换完毕的字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const strEnd = str.replace(/前端/, &#x27;web&#x27;) 只能替换一个</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 修饰符 g 全部替换</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> strEnd = str.<span class="title function_">replace</span>(<span class="regexp">/前端/g</span>, <span class="string">&#x27;web&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(strEnd) </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="change-事件">change 事件</h2><p>给input注册 change 事件，值被修改并且失去焦点后触发</p><h2 id="判断是否有类">判断是否有类</h2><p>元素.classList.contains() 看看有没有包含某个类，如果有则返回true，么有则返回false</p>]]></content>
    
    
    <summary type="html">🍰知识总结6</summary>
    
    
    
    <category term="webAPIs" scheme="https://lwzblog.com/categories/webAPIs/"/>
    
    
    <category term="webAPIs" scheme="https://lwzblog.com/tags/webAPIs/"/>
    
  </entry>
  
  <entry>
    <title>webAPIs-5</title>
    <link href="https://lwzblog.com/posts/2043412e.html"/>
    <id>https://lwzblog.com/posts/2043412e.html</id>
    <published>2023-04-05T10:19:03.000Z</published>
    <updated>2023-04-06T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Web APIs -day5</h1><blockquote><p>目标： 能够利用JS操作浏览器,具备利用本地存储实现学生就业表的能力</p></blockquote><ul><li>BOM操作</li><li>综合案例</li></ul><h2 id="js组成">js组成</h2><p>JavaScript的组成</p><ul><li><p>ECMAScript:</p><ul><li>规定了js基础语法核心知识。</li><li>比如：变量、分支语句、循环语句、对象等等</li></ul></li><li><p>Web APIs :</p><ul><li>DOM   文档对象模型， 定义了一套操作HTML文档的API</li><li>BOM   浏览器对象模型，定义了一套操作浏览器窗口的API</li></ul></li></ul><h2 id="window对象">window对象</h2><p><strong>BOM</strong> (Browser Object Model ) 是浏览器对象模型</p><ul><li>window对象是一个全局对象，也可以说是JavaScript中的顶级对象</li><li>像document、alert()、console.log()这些都是window的属性，基本BOM的属性和方法都是window的</li><li>所有通过var定义在全局作用域中的变量、函数都会变成window对象的属性和方法</li><li>window对象下的属性和方法调用的时候可以省略window</li></ul><h2 id="定时器-延迟函数">定时器-延迟函数</h2><p>JavaScript 内置的一个用来让代码延迟执行的函数，叫 setTimeout</p><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(回调函数, 延迟时间)</span><br></pre></td></tr></table></figure><p>setTimeout 仅仅只执行一次，所以可以理解为就是把一段代码延迟执行, 平时省略window</p><p>间歇函数 setInterval : 每隔一段时间就执行一次， , 平时省略window</p><p>清除延时函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clearTimeout</span>(timerId)</span><br></pre></td></tr></table></figure><blockquote><p>注意点</p><ol><li>延时函数需要等待,所以后面的代码先执行</li><li>返回值是一个正整数，表示定时器的编号</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定时器之延迟函数</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 开启延迟函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> timerId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我只执行一次&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">3000</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.1 延迟函数返回的还是一个正整数数字，表示延迟函数的编号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(timerId)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.2 延迟函数需要等待时间，所以下面的代码优先执行</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 关闭延迟函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">clearTimeout</span>(timerId)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="location对象">location对象</h2><p>location (地址) 它拆分并保存了 URL 地址的各个组成部分， 它是一个对象</p><table><thead><tr><th>属性/方法</th><th>说明</th></tr></thead><tbody><tr><td>href</td><td>属性，获取完整的 URL 地址，赋值时用于地址的跳转</td></tr><tr><td>search</td><td>属性，获取地址中携带的参数，符号 ？后面部分</td></tr><tr><td>hash</td><td>属性，获取地址中的啥希值，符号 # 后面部分</td></tr><tr><td>reload()</td><td>方法，用来刷新当前页面，传入参数 true 时表示强制刷新</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/music&quot;</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/download&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;reload&quot;</span>&gt;</span>刷新页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// location 对象  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. href属性 （重点） 得到完整地址，赋值则是跳转到新地址</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">href</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// location.href = &#x27;http://www.itcast.cn&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. search属性  得到 ? 后面的地址 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>)  <span class="comment">// ?search=笔记本</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. hash属性  得到 # 后面的地址</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. reload 方法  刷新页面</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.reload&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// location.reload() // 页面刷新</span></span></span><br><span class="line"><span class="language-javascript">      location.<span class="title function_">reload</span>(<span class="literal">true</span>) <span class="comment">// 强制页面刷新 ctrl+f5</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="navigator对象">navigator对象</h2><p>navigator是对象，该对象下记录了浏览器自身的相关信息</p><p>常用属性和方法：</p><ul><li>通过 userAgent 检测浏览器的版本及平台</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测 userAgent（浏览器信息）</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> userAgent = navigator.<span class="property">userAgent</span></span><br><span class="line">  <span class="comment">// 验证是否为Android或iPhone</span></span><br><span class="line">  <span class="keyword">const</span> android = userAgent.<span class="title function_">match</span>(<span class="regexp">/(Android);?[\s\/]+([\d.]+)?/</span>)</span><br><span class="line">  <span class="keyword">const</span> iphone = userAgent.<span class="title function_">match</span>(<span class="regexp">/(iPhone\sOS)\s([\d_]+)/</span>)</span><br><span class="line">  <span class="comment">// 如果是Android或iPhone，则跳转至移动站点</span></span><br><span class="line">  <span class="keyword">if</span> (android || iphone) &#123;</span><br><span class="line">    location.<span class="property">href</span> = <span class="string">&#x27;http://m.itcast.cn&#x27;</span></span><br><span class="line">  &#125;&#125;)();</span><br></pre></td></tr></table></figure><h2 id="histroy对象">histroy对象</h2><p>history (历史)是对象，主要管理历史记录， 该对象与浏览器地址栏的操作相对应，如前进、后退等</p><p><strong>使用场景</strong></p><p>history对象一般在实际开发中比较少用，但是会在一些OA 办公系统中见到。</p><p><img src="assets/1676047834796.png" alt="67604783479"></p><p>常见方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;back&quot;</span>&gt;</span>←后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;forward&quot;</span>&gt;</span>前进→<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// histroy对象</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.前进</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> forward = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.forward&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    forward.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// history.forward() </span></span></span><br><span class="line"><span class="language-javascript">      history.<span class="title function_">go</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.后退</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> back = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.back&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    back.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// history.back()</span></span></span><br><span class="line"><span class="language-javascript">      history.<span class="title function_">go</span>(-<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="本地存储（今日重点）">本地存储（今日重点）</h2><p>本地存储：将数据存储在本地浏览器中</p><p>常见的使用场景：</p><p><a href="https://todomvc.com/examples/vanilla-es6/">https://todomvc.com/examples/vanilla-es6/</a>    页面刷新数据不丢失</p><p>好处：</p><p>1、页面刷新或者关闭不丢失数据，实现数据持久化</p><p>2、容量较大，sessionStorage和 localStorage 约 5M 左右</p><h3 id="localStorage（重点）">localStorage（重点）</h3><p><strong>作用:</strong> 数据可以长期保留在本地浏览器中，刷新页面和关闭页面，数据也不会丢失</p><p>**特性：**以键值对的形式存储，并且存储的是字符串， 省略了window</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>本地存储-localstorage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 本地存储 - localstorage 存储的是字符串 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 存储</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 获取</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;age&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 删除</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;age&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="sessionStorage（了解）">sessionStorage（了解）</h3><p>特性：</p><ul><li>用法跟localStorage基本相同</li><li>区别是：当页面浏览器被关闭时，存储在 sessionStorage 的数据会被清除</li></ul><p>存储：sessionStorage.setItem(key,value)</p><p>获取：sessionStorage.getItem(key)</p><p>删除：sessionStorage.removeItem(key)</p><h3 id="localStorage-存储复杂数据类型">localStorage 存储复杂数据类型</h3><p>**问题：**本地只能存储字符串,无法存储复杂数据类型.</p><p>**解决：**需要将复杂数据类型转换成 JSON字符串,在存储到本地</p><p>**语法：**JSON.stringify(复杂数据类型)</p><p>JSON字符串：</p><ul><li>首先是1个字符串</li><li>属性名使用双引号引起来，不能单引号</li><li>属性值如果是字符串型也必须双引号</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 本地存储复杂数据类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> goods = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小米&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">price</span>: <span class="number">1999</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// localStorage.setItem(&#x27;goods&#x27;, goods)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(localStorage.getItem(&#x27;goods&#x27;))</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 把对象转换为JSON字符串  JSON.stringify</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;goods&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(goods))</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(typeof localStorage.getItem(&#x27;goods&#x27;))</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**问题：**因为本地存储里面取出来的是字符串，不是对象，无法直接使用</p><p>**解决： **把取出来的字符串转换为对象</p><p>**语法：**JSON.parse(JSON字符串)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 本地存储复杂数据类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> goods = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小米&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">price</span>: <span class="number">1999</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// localStorage.setItem(&#x27;goods&#x27;, goods)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(localStorage.getItem(&#x27;goods&#x27;))</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 把对象转换为JSON字符串  JSON.stringify</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;goods&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(goods))</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(typeof localStorage.getItem(&#x27;goods&#x27;))</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 把JSON字符串转换为对象  JSON.parse</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;goods&#x27;</span>)))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 1. 数组 map方法 处理数据并且 返回一个数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">const</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">ele, index</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(ele)  // 数组元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(index) // 索引号</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> ele + <span class="string">&#x27;颜色&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><blockquote><p>map 也称为映射。映射是个术语，指两个元素的集之间元素相互“对应”的关系。</p><p>map重点在于有返回值，forEach没有返回值（undefined）</p></blockquote><h3 id="数组join方法">数组join方法</h3><p>**作用：**join() 方法用于把数组中的所有元素转换一个字符串</p><p><strong>语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 数组 map方法 处理数据并且 返回一个数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">ele, index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(ele)  // 数组元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(index) // 索引号</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> ele + <span class="string">&#x27;颜色&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 数组join方法  把数组转换为字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 小括号为空则逗号分割</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newArr.<span class="title function_">join</span>())  <span class="comment">// red颜色,blue颜色,pink颜色</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 小括号是空字符串，则元素之间没有分隔符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">//red颜色blue颜色pink颜色</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newArr.<span class="title function_">join</span>(<span class="string">&#x27;|&#x27;</span>))  <span class="comment">//red颜色|blue颜色|pink颜色</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">🍰知识总结5</summary>
    
    
    
    <category term="webAPIs" scheme="https://lwzblog.com/categories/webAPIs/"/>
    
    
    <category term="webAPIs" scheme="https://lwzblog.com/tags/webAPIs/"/>
    
  </entry>
  
  <entry>
    <title>webAPIs-4</title>
    <link href="https://lwzblog.com/posts/2043412d.html"/>
    <id>https://lwzblog.com/posts/2043412d.html</id>
    <published>2023-04-04T10:19:03.000Z</published>
    <updated>2023-04-05T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Web APIs -day4</h1><blockquote><p>目标: 了解DOM节点的增删改查，掌握利用数据操作页面，完成移动端通讯录案例</p></blockquote><ul><li>日期对象</li><li>节点操作</li><li>M端事件</li><li>JS插件</li></ul><h2 id="日期对象">日期对象</h2><p>日期对象：用来表示日期和时间的对象</p><p>作用：可以得到当前系统日期和时间</p><p>Date是JavaScript内置对象</p><p>日期对象使用必须先<code>实例化</code>：创建一个日期对象并获取时间</p><p>在代码中发现了 <code>new</code> 关键字时，一般将这个操作称为实例化</p><h3 id="实例化">实例化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1. 实例化日期对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1.1 得到当前的日期和时间</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(date)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1.2 得到指定的日期和时间</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> date1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2099-12-12 08:08:08&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(date1)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="格式化日期对象">格式化日期对象</h3><table><thead><tr><th>方法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获得年份</td><td>获取四位年份</td></tr><tr><td>getMonth()</td><td>获得月份</td><td>取值为 0 ~ 11</td></tr><tr><td>getDate()</td><td>获取月份中的每一天</td><td>不同月份取值也不相同</td></tr><tr><td>getDay()</td><td>获取星期</td><td>取值为 0 ~ 6</td></tr><tr><td>getHours()</td><td>获取小时</td><td>取值为 0 ~ 23</td></tr><tr><td>getMinutes()</td><td>获取分钟</td><td>取值为 0 ~ 59</td></tr><tr><td>getSeconds()</td><td>获取秒</td><td>取值为 0 ~ 59</td></tr></tbody></table> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2. 格式化日期对象-转换成开发中常见的日期和时间格式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> myDate = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myDate.<span class="title function_">getFullYear</span>()) <span class="comment">// 得到年份 数字型的 2023</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myDate.<span class="title function_">getMonth</span>() + <span class="number">1</span>) <span class="comment">// 得到月份 数字型的 0 需要加1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myDate.<span class="title function_">getDate</span>()) <span class="comment">// 得到几号 数字型的 27 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myDate.<span class="title function_">getDay</span>()) <span class="comment">// 得到星期  数字型 5 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myDate.<span class="title function_">getHours</span>()) <span class="comment">// 得到小时</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myDate.<span class="title function_">getMinutes</span>()) <span class="comment">// 得到分钟</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myDate.<span class="title function_">getSeconds</span>()) <span class="comment">// 得到秒数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`现在的日期是:<span class="subst">$&#123;myDate.getFullYear()&#125;</span>年<span class="subst">$&#123;myDate.getMonth() + <span class="number">1</span>&#125;</span>月<span class="subst">$&#123;myDate.getDate()&#125;</span>日`</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="格式化日期对象另外方法">格式化日期对象另外方法</h3><table><thead><tr><th>方法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>toLocaleString()</td><td>返回该日期对象的字符串（包含日期和时间）</td><td>2099/9/20 18:30:43</td></tr><tr><td>toLocaleDateString()</td><td>返回日期对象日期部分的字符串</td><td>2099/9/20</td></tr><tr><td>toLocaleTimeString()</td><td>返回日期对象时间部分的字符串</td><td>18:30:43</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toLocaleString</span>())  <span class="comment">// 2023/1/27 23:19:20</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toLocaleDateString</span>())  <span class="comment">// 2023/1/27 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toLocaleTimeString</span>())  <span class="comment">// 23:19:20</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 封装一个 getDateTime函数，里面格式化时间对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getDateTime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> date.<span class="title function_">toLocaleString</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注意： 先写上这句话，防止盒子有1秒的空白期</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>).<span class="property">innerText</span> = <span class="title function_">getDateTime</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 显示到box盒子里面，并且添加定时器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>).<span class="property">innerText</span> = <span class="title function_">getDateTime</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="时间戳">时间戳</h3><p>什么是时间戳:</p><ul><li>是指1970年01月01日00时00分00秒起至现在的总毫秒数(数字型)，它是一种特殊的计量时间的方式</li></ul><p><strong>使用场景：</strong> 计算倒计时效果，需要借助于时间戳完成</p><p>算法：</p><ul><li>将来的时间戳  -  现在的时间戳  =  剩余时间毫秒数</li><li>剩余时间毫秒数转换为年月日时分秒就是倒计时时间</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 1. 实例化</span></span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">  <span class="comment">// 2. 获取时间戳</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getTime</span>())</span><br><span class="line"><span class="comment">// 还有一种获取时间戳的方法</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">  <span class="comment">// 还有一种获取时间戳的方法</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>获取时间戳的方法，分别为 getTime 和 Date.now 和  +new Date()</p><h2 id="DOM-节点">DOM 节点</h2><p>**DOM树：**DOM 将 HTML文档以树状结构直观的表现出来，我们称之为 DOM 树 或者 节点树</p><p>**节点（Node）**是DOM树(节点树)中的单个点。包括文档本身、元素、文本以及注释都属于是节点。</p><ul><li><code>元素节点</code>（重点）<ul><li>所有的标签 比如 body、 div</li><li>html 是根节点</li></ul></li><li>属性节点<ul><li>所有的属性 比如 href</li></ul></li><li>文本节点<ul><li>所有的文本</li></ul></li></ul><h3 id="查找节点">查找节点</h3><p>利用节点关系查找节点，返回的都是对象</p><ul><li>父节点</li><li>子节点</li><li>兄弟节点</li></ul><p>有了查找节点可以使我们选择元素更加方便</p><h4 id="父节点">父节点</h4><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素.<span class="property">parentNode</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pop&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击关闭按钮可以关闭父盒子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> closeBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.close&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 利用孩子选取父节点,返回的也是一个元素对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(closeBtn.<span class="property">parentNode</span>)</span></span><br><span class="line"><span class="language-javascript">    closeBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="子节点">子节点</h4><p><strong>语法:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父元素.<span class="property">children</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第1个孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第2个孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第3个孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第4个孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 查询子节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">children</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 查询兄弟节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> li2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul li:nth-child(2)&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(li2)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(li2.<span class="property">previousElementSibling</span>) <span class="comment">// 上一个兄弟</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(li2.<span class="property">nextElementSibling</span>)  <span class="comment">// 下一个兄弟</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">children</span>[<span class="number">0</span>]) <span class="comment">// 第一个孩子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">children</span>[<span class="number">2</span>]) <span class="comment">// 第三个孩子</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="兄弟节点">兄弟节点</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第1个孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第2个孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第3个孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第4个孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 查询兄弟节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> li2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul li:nth-child(2)&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(li2)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(li2.<span class="property">previousElementSibling</span>) <span class="comment">// 上一个兄弟</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(li2.<span class="property">nextElementSibling</span>)  <span class="comment">// 下一个兄弟</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">children</span>[<span class="number">0</span>]) <span class="comment">// 第一个孩子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">children</span>[<span class="number">2</span>]) <span class="comment">// 第三个孩子</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="增加节点">增加节点</h3><p>很多情况下，我们需要在页面中增加元素</p><ul><li>比如，点击发布按钮，可以新增一条信息</li></ul><p>一般情况下，我们新增节点，按照如下操作：</p><ul><li>创建一个新的节点</li><li>把创建的新的节点放入到指定的元素内部</li></ul><ol><li><p>父元素最后一个子节点之后，插入节点元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">append</span>()</span><br></pre></td></tr></table></figure></li><li><p>父元素第一个子元素的之前，插入节点元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">prepend</span>()</span><br></pre></td></tr></table></figure></li></ol><p>如下代码演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是小li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 创建节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    li.<span class="property">innerHTML</span> = <span class="string">&#x27;我是放到后面的&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(li)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 追加给父元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.1 append 放到ul 的最后面 类似css的 after伪元素</span></span></span><br><span class="line"><span class="language-javascript">    ul.<span class="title function_">append</span>(li)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.2 prepend放到 ul 的最前面 类似css的 before伪元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> firstli = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    firstli.<span class="property">innerHTML</span> = <span class="string">&#x27;我是放到前面的&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    ul.<span class="title function_">prepend</span>(firstli)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="删除节点">删除节点</h3><p>若一个节点在页面中已不需要时，可以删除它</p><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">remove</span>()</span><br></pre></td></tr></table></figure><blockquote><ol><li>把对象从它所属的 DOM 树中删除</li><li>删除节点和隐藏节点（display:none） 有区别的： 隐藏节点还是存在的，但是删除，则从DOM树中删除</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>删除节点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;remove&quot;</span>&gt;</span>我要删除<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;none&quot;</span>&gt;</span>我要隐藏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1. 删除节点, remove 会从dom树中删除这个元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> remove = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.remove&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      remove.<span class="title function_">remove</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. display:none 隐藏元素，页面看不见，但是dom树中还存在这个标签</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> none = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.none&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      none.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="M端事件">M端事件</h2><p>M端(移动端)有自己独特的地方。比如<code>触屏事件 touch</code>（也称触摸事件），Android 和 IOS都有。</p><p>touch 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指（或触控笔）对屏幕或者触控板操作。</p><p>常见的触屏事件如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 触摸事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1. 手指触屏开始事件 touchstart</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我开始摸了&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2. 手指触屏滑动事件 touchmove</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我一直摸&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3. 手指触屏结束事件  touchend</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchend&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我摸完了&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="JS插件">JS插件</h2><p>插件: 就是别人写好的一些代码,我们只需要复制对应的代码,就可以直接实现对应的效果</p><p>学习插件的思路：</p><p>1.看官网。了解这个插件可以完成什么需求           <a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a></p><p>2.查看基本使用流程 。     <a href="https://www.swiper.com.cn/usage/index.html">https://www.swiper.com.cn/usage/index.html</a></p><p>3.写个小demo。看在线演示,找到符合自己需求的demo      <a href="https://www.swiper.com.cn/demo/index.html">https://www.swiper.com.cn/demo/index.html</a></p><p>4.应用的开发中。</p><h3 id="AlloyFinger">AlloyFinger</h3><p>AlloyFinger 是腾讯 AlloyTeam 团队开源的超轻量级 Web 手势插件，为元素注册各种手势事件</p><p>github地址：<a href="https://github.com/AlloyTeam/AlloyFinger">https://github.com/AlloyTeam/AlloyFinger</a></p><p>使用步骤：</p><ol><li>下载js库：<a href="http://alloyteam.github.io/AlloyFinger/alloy_finger.js">http://alloyteam.github.io/AlloyFinger/alloy_finger.js</a></li><li>将AlloyFinger库引入当前文件：&lt;scriptsrc=“alloy_finger.js”&gt;</script></li></ol><p>​    或者使用在线地址：<script src="<https://unpkg.com/alloyfinger@0.1.16/alloy_finger.js>"></script></p><ol start="3"><li><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">AlloyFinger</span>(element, &#123;  <span class="comment">// element 是给哪个元素做滑动事件</span></span><br><span class="line">  <span class="attr">swipe</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// 滑动的时候要做的事情 e.direction 可以判断上下左右滑动 Left  Right 等</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">🍰知识总结4</summary>
    
    
    
    <category term="webAPIs" scheme="https://lwzblog.com/categories/webAPIs/"/>
    
    
    <category term="webAPIs" scheme="https://lwzblog.com/tags/webAPIs/"/>
    
  </entry>
  
  <entry>
    <title>webAPIs-3</title>
    <link href="https://lwzblog.com/posts/2043412c.html"/>
    <id>https://lwzblog.com/posts/2043412c.html</id>
    <published>2023-04-03T10:19:03.000Z</published>
    <updated>2023-04-04T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Web APIs -day3</h1><blockquote><p>目标：学习事件流，事件委托，其他事件等知识，优化多个事件绑定和实现常见网页交互</p></blockquote><ul><li>事件流</li><li>移除事件监听</li><li>其他事件</li></ul><h2 id="事件流">事件流</h2><p><strong>为什么要学习事件流？</strong></p><ul><li>可以帮我们解决一些疑惑，比如点击子盒子会会弹出2次的问题</li></ul><p>事件流指的是事件完整执行过程中的<code>流动路径</code></p><p>当触发事件时，会经历两个阶段，分别是<code>捕获阶段</code>、<code>冒泡阶段</code></p><p>事件捕获概念：</p><p>当一个元素的事件被触发时，会从DOM的根元素开始依次调用同名事件 (从外到里)</p><h3 id="捕获">捕获</h3><p>事件捕获需要写对应代码才能看到效果</p><p><strong>语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素.addEventListener(&#x27;click&#x27;, 回调函数， 是否使用捕获)  </span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    父盒子</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>子盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 事件流</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 事件捕获</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// // 点击父盒子</span></span></span><br><span class="line"><span class="language-javascript">     father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="title function_">alert</span>(<span class="string">&#x27;我是爸爸&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">     &#125;, <span class="literal">true</span>)  <span class="comment">// 事件捕获</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// 点击子盒子</span></span></span><br><span class="line"><span class="language-javascript">     son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="title function_">alert</span>(<span class="string">&#x27;我是儿子&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">     &#125;, <span class="literal">true</span>) <span class="comment">// 事件捕获</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>说明：</p><ul><li>addEventListener第三个参数传入 true 代表是捕获阶段触发（很少使用）</li><li>若传入false代表冒泡阶段触发，默认就是 false</li></ul></blockquote><p>###事件冒泡</p><p>事件冒泡概念:</p><p>当一个元素的事件被触发时，同样的事件将会在该元素的所有祖先元素中依次被触发。这一过程被称为事件冒泡</p><ul><li>简单理解：当一个元素触发事件后，会依次向上调用所有父级元素的 <code>同名事件</code></li><li>事件冒泡是<code>默认</code>存在的，或者第三个参数传入 <code>false</code> 都是冒泡</li><li><code>实际工作都是使用事件冒泡为主</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    父盒子</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>子盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 事件流</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 事件冒泡</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击父盒子</span></span></span><br><span class="line"><span class="language-javascript">    father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;我是爸爸&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击子盒子</span></span></span><br><span class="line"><span class="language-javascript">    son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;我是儿子&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">false</span>) </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="阻止冒泡">阻止冒泡</h3><p>**问题：**因为默认就有冒泡阶段的存在，所以容易导致事件影响到父级元素（祖先元素）</p><p>**需求：**若想把事件就限制在当前元素内，就需要阻止事件冒泡</p><p><strong>前提：</strong></p><p>阻止事件冒泡需要拿到<code>事件对象</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    父盒子</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>子盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 事件流</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 事件冒泡</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击父盒子</span></span></span><br><span class="line"><span class="language-javascript">    father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;我是爸爸&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击子盒子</span></span></span><br><span class="line"><span class="language-javascript">    son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;我是儿子&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.1 先获取事件对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.2 事件对象.stopPropagation()  注意是个方法 </span></span></span><br><span class="line"><span class="language-javascript">      e.<span class="title function_">stopPropagation</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;) </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结论：事件对象中的 <code>ev.stopPropagation</code> 方法，专门用来阻止事件冒泡（事件传播）</p><blockquote><p>鼠标经过事件：</p><p>mouseover 和 mouseout 会有冒泡效果</p><p>mouseenter  和 mouseleave   没有冒泡效果 (推荐)</p></blockquote><h3 id="事件委托">事件委托</h3><p><strong>事件委托(EventDelegation)</strong>：是JavaScript中注册事件的常用技巧，也称为事件委派、事件代理</p><p>简单理解：原本需要注册在子元素的事件委托给父元素，让父元素担当事件监听的职务</p><p><strong>为什么要用事件委托呢？</strong></p><ul><li>如果同时给多个元素注册事件，还需要利用循环多次注册事件</li><li>大量的事件监听是比较耗费性能的，如下代码所示</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 假设页面中有 10000 个 button 元素</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> buttons = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;table button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= buttons.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 为 10000 个 button 元素添加了事件</span></span></span><br><span class="line"><span class="language-javascript">    buttons.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 省略具体执行逻辑...</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>事件委托是利用事件流的特征解决一些开发需求的知识技巧</p><ul><li>优点：减少注册次数，可以提高程序性能</li><li>原理：事件委托其实是利用事件冒泡的特点<ul><li>给父元素注册事件，当我们触发子元素的时候，会冒泡到父元素身上，从而触发父元素的事件</li></ul></li></ul><p>利用事件委托方式如何得到当前点击的元素呢？</p><ul><li>实现：事件对象.target. tagName 可以获得真正触发事件的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第1个孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第2个孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第3个孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第4个孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第5个孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 需求： 点击每个小li都会有弹窗效果</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 获取父元素ul</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 给ul注册点击事件</span></span></span><br><span class="line"><span class="language-javascript">    ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// alert(&#x27;我会弹窗&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 3. 利用事件对象.target 得到目标元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(e.target)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// e.target.style.color = &#x27;pink&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 需求2：点击哪个小li，对应的li变色</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.dir(e.target.tagName) 可以得到目标元素的标签名</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;LI&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;pink&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="阻止默认行为">阻止默认行为</h3><p>阻止元素发生默认的行为</p><p>例如：</p><ul><li>当点击提交按钮时阻止对表单的提交</li><li>阻止链接的跳转等等</li></ul><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">事件对象.<span class="title function_">preventDefault</span>()</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    姓名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>点击跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 阻止默认行为</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;[name=username]&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    form.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 如果input表单的值为空则不允许提交</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (input.<span class="property">value</span> === <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// return 无法阻止提交事件</span></span></span><br><span class="line"><span class="language-javascript">        e.<span class="title function_">preventDefault</span>()  <span class="comment">// 阻止提交事件</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      e.<span class="title function_">preventDefault</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件解绑（了解）">事件解绑（了解）</h2><p>移除事件处理函数，也称为解绑事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;l2&quot;</span>&gt;</span>移除L2事件监听<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;l0&quot;</span>&gt;</span>移除L0事件监听<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 需求：按钮就点击一次，然后移除点击事件</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. l2事件监听</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> l2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.l2&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    l2.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;我点击了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 移除事件监听</span></span></span><br><span class="line"><span class="language-javascript">      l2.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. l0事件监听</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> l0 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.l0&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    l0.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;我点击了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 移除事件监听</span></span></span><br><span class="line"><span class="language-javascript">      l0.<span class="property">onclick</span> = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="其他事件">其他事件</h2><h3 id="页面加载事件">页面加载事件</h3><p>加载外部资源（如图片、外联CSS和JavaScript等）加载完毕时触发的事件</p><p>为什么要学？</p><ul><li>有些时候需要等页面资源全部处理完了做一些事情</li><li>老代码喜欢把 script 写在 head 中，这时候直接找 dom 元素找不到</li></ul><p><strong>事件名：load</strong></p><p>监听页面所有资源加载完毕：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// xxxxx</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当初始的 HTML 文档被完全加载和解析完成之后就触发，而无需等待样式表、图像等完全加载</p><p><strong>事件名：DOMContentLoaded</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// xxxxx</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="元素滚动事件">元素滚动事件</h3><p>滚动条在滚动的时候持续触发的事件</p><p>为什么要学？</p><ul><li>很多网页需要检测用户把页面滚动到某个区域后做一些处理，比如固定导航栏，比如返回顶部</li></ul><p><strong>事件名：scroll</strong></p><p>监听整个页面滚动：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// xxxxx</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>scrollTop / scrollLeft, 被卷去的头部或者左侧，可以读取，也可以修改（赋值）</p></blockquote><h3 id="页面尺寸事件">页面尺寸事件</h3><p>会在窗口尺寸改变的时候触发事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// xxxxx</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>clientWidth和clientHeight，获取元素的可见部分宽高（不包含border，margin，滚动条等）</p></blockquote>]]></content>
    
    
    <summary type="html">🍰知识总结3</summary>
    
    
    
    <category term="webAPIs" scheme="https://lwzblog.com/categories/webAPIs/"/>
    
    
    <category term="webAPIs" scheme="https://lwzblog.com/tags/webAPIs/"/>
    
  </entry>
  
  <entry>
    <title>webAPIs-2</title>
    <link href="https://lwzblog.com/posts/2043412b.html"/>
    <id>https://lwzblog.com/posts/2043412b.html</id>
    <published>2023-04-02T10:19:03.000Z</published>
    <updated>2023-04-03T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Web APIs -day2</h1><blockquote><p>掌握事件绑定处理和事件对象，完成常见网页交互</p></blockquote><ul><li>事件监听</li><li>事件类型</li><li>事件对象</li><li>拓展知识</li></ul><h2 id="事件监听">事件监听</h2><p>以前写的代码都是自动执行的，我们希望一段代码在某个特定的时机才去执行，比如</p><ul><li>点击按钮可以弹出警示框</li><li>比如鼠标经过显示下拉菜单等等</li></ul><h3 id="事件">事件</h3><p>事件是程序在运行的时候，发生的特定动作或者特定的事情</p><ul><li>比如<code>点击</code>按钮、</li><li>比如<code>鼠标经过</code>菜单等等</li></ul><p>通常，当事件发生时，可以做些事情</p><ul><li>比如点击按钮，可以 <code>弹出警示框</code></li><li>比如鼠标经过某个盒子，可以<code>显示下拉菜单</code></li></ul><h3 id="事件监听-2">事件监听</h3><p>事件发生后，想要执行的代码写到<code>事件处理函数</code>里面</p><ul><li>当触发指定的事件时，则事件处理函数就会被执行</li><li>事件监听是将事件处理函数注册到元素对象身上</li><li>事件监听也称为: 事件注册、事件绑定</li></ul><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素对象.<span class="title function_">addEventListener</span>(<span class="string">&#x27;事件类型&#x27;</span>, 事件处理函数)</span><br></pre></td></tr></table></figure><p>事件监听三要素</p><ul><li>事件源(谁被触发了)</li><li>事件类型  (什么情况下触发，点击还是鼠标经过等)</li><li>事件处理函数（要做什么事情）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件监听<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>唐伯虎<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 需求： 点击button按钮，页面会弹出一个警示框，内容显示 &#x27;秋香&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 事件监听语法:</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 元素对象.addEventListener(&#x27;事件类型&#x27;, 事件处理函数)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1. 获取元素对象 button按钮</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. 事件监听 </span></span></span><br><span class="line"><span class="language-javascript">      btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;秋香&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>1.事件类型要加引号，小写</p><p>2.函数是点击之后再去执行，每次点击都会执行一次</p></blockquote><h3 id="回调函数">回调函数</h3><p>**回调函数:**当一个函数当做<code>参数</code>来传递给另外一个函数的时候，这个函数就是回调函数（<code>回头调用</code>的函数）</p><p>**作用：**完成某些特定任务</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 定时器间隔函数，里面第一个参数又是函数，这个匿名函数就是回调函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是回调函数&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. addEventListener 函数的第二个参数也是函数，这个匿名函数也是回调函数</span></span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是回调函数&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件监听版本">事件监听版本</h3><ol><li><p>DOM0 事件</p><p>事件源.on事件类型 = function() { }</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是弹窗1&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>DOM 2事件</p><p>事件源.addEventListener(事件类型，事件处理函数)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是回调函数&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><strong>区别：</strong></p><p>on 方式同名事件会被覆盖，addEventListener则不会，同时拥有事件更多特性，推荐使用</p></blockquote><h2 id="事件类型">事件类型</h2><p>将众多的事件类型分类可分为：鼠标事件、键盘事件、表单事件、焦点事件等，我们逐一展开学习。</p><p>事件类型的大小写敏感的字符串，统一用小写字母</p><h3 id="鼠标事件">鼠标事件</h3><p>鼠标事件是指跟鼠标操作相关的事件，如单击、经过等。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 鼠标事件类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 鼠标点击</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我点击了盒子&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 鼠标经过</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我鼠标经过了盒子&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 鼠标离开</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我鼠标离开了盒子&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="焦点事件">焦点事件</h3><p>主要是针对于表单是否获得光标的事件， 获得焦点  focus 、失去焦点 blur</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>焦点事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-attr">[type=text]</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">245px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">17px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;search-text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1. 焦点事件(手动触发)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> search_text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.search-text&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.1 获得焦点  focus</span></span></span><br><span class="line"><span class="language-javascript">      search_text.<span class="title function_">addEventListener</span>(<span class="string">&#x27;focus&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获得了焦点&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.2 失去焦点 blur</span></span></span><br><span class="line"><span class="language-javascript">      search_text.<span class="title function_">addEventListener</span>(<span class="string">&#x27;blur&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失去了焦点&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. 拓展 自动获得焦点 focus()    自动失去焦点 blur()</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//  2.1 语法: 元素.focus()  比如百度首页搜索框自动获得焦点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> search = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.search&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      search.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="键盘事件和-input事件">键盘事件和 input事件</h3><table><thead><tr><th>事件</th><th>触发时机</th><th>得到表单值</th></tr></thead><tbody><tr><td>keydown</td><td>按下键盘时触发</td><td>不带最后一次按键值 ab</td></tr><tr><td>keyup</td><td>弹起键盘时触发</td><td>输入内容   abc</td></tr><tr><td>input</td><td>表单value发生变化时触发</td><td>输入内容   abc</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>input事件和键盘事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">textarea</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">resize</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;tx&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;发一条友善的评论&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> tx = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#tx&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 键盘事件 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.1 键盘按下事件  keydown  当我们按下键盘的时候就触发</span></span></span><br><span class="line"><span class="language-javascript">    tx.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是keydown事件&#x27;</span> + tx.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.2 键盘弹起事件  keyup 当我们键盘弹起的时候就触发</span></span></span><br><span class="line"><span class="language-javascript">    tx.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是keyup事件&#x27;</span> + tx.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 用户输入事件 input ，是表单value的值发生变化的时候触发</span></span></span><br><span class="line"><span class="language-javascript">    tx.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是input事件&#x27;</span> + tx.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 注意事项</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.1 执行顺序  keydown →  input   →  keyup</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.2 keydown 获取值的时候得不到最后一次按键的值， keyup和input可以得到用户输入内容</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意事项</strong></p><ol><li>执行顺序  keydown →  input   →  keyup</li><li>keydown 获取值的时候得不到最后一次按键的值， keyup和input可以得到用户输入内容</li></ol></blockquote><h2 id="事件对象">事件对象</h2><p>**事件对象是什么？ **</p><ul><li>也是个对象，这个对象里有事件触发时的相关信息，包含属性和方法</li><li>例如：鼠标点击事件中，事件对象就存了鼠标点在哪个位置等信息</li></ul><p><strong>使用场景</strong></p><ul><li>可以判断用户按下哪个键，比如按下回车键可以发布新闻</li><li>可以判断鼠标点击了哪个元素，从而做相应的操作</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;tx&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;发一条友善的评论&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 事件对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> tx = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#tx&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    tx.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// e 就是事件对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(e)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(e.key)  // a </span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 用户如果按下的是回车键，则弹出框提示按下了回车键</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&#x27;Enter&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;您按下了回车键&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>事件回调函数的【第1个参数】即所谓的事件对象，通常习惯性的将这个对数命名为 <code>event</code>、<code>ev</code> 、<code>ev</code> 。</p><h2 id="环境对象">环境对象</h2><blockquote><p>能够分析判断函数运行在不同环境中 this 所指代的对象。</p></blockquote><p>**环境对象：**指的是函数内部特殊的 this,  它指向一个对象，并且受当前环境影响</p><p>**作用：**弄清楚this的指向，可以让我们代码更简洁</p><ul><li>函数的调用方式不同，this 指代的对象也不同</li><li>【谁调用， this 就是谁】 是判断 this 指向的粗略规则</li><li>直接调用函数，其实相当于是 window.函数，所以 this 指代 window</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 环境对象 this   粗略规则： 谁调用函数，this就指向谁</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 全局环境</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(this)  // this 指向 window 全局对象</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 普通函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// this 指向 window 全局对象</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">fn</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 对象方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">uname</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">sing</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// this 指向 obj对象</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    obj.<span class="title function_">sing</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. 事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    btn1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(this)  // this 指向 btn 这个对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// btn1.style.backgroundColor = &#x27;pink&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="排他思想">排他思想</h2><p>是一种思路，目的是突出显示某个元素</p><p>比如，有多个元素，当鼠标经过时，只有当前元素会添加高亮样式，其余的元素移除样式</p><p>口诀：注意顺序</p><p>①：排除其他人</p><p>②：保留我自己</p>]]></content>
    
    
    <summary type="html">🍰知识总结2</summary>
    
    
    
    <category term="webAPIs" scheme="https://lwzblog.com/categories/webAPIs/"/>
    
    
    <category term="webAPIs" scheme="https://lwzblog.com/tags/webAPIs/"/>
    
  </entry>
  
  <entry>
    <title>webAPIs-1</title>
    <link href="https://lwzblog.com/posts/2043412a.html"/>
    <id>https://lwzblog.com/posts/2043412a.html</id>
    <published>2023-04-01T10:19:03.000Z</published>
    <updated>2023-04-01T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Web APIs -day1</h1><blockquote><p>掌握DOM属性操作，完成元素内容设置，元素属性设置，控制元素样式</p></blockquote><ul><li>DOM简介</li><li>获取DOM元素</li><li>操作元素内容</li><li>操作元素属性</li><li>定时器-间隔函数</li><li>综合案例</li></ul><table><thead><tr><th>描述</th><th>属性/方法</th><th>效果</th></tr></thead><tbody><tr><td>获取DOM对象</td><td>document.querySelector()</td><td>获取指定的第一个元素</td></tr><tr><td>document.querySelectorAll()</td><td>获取指定的所有元素</td><td></td></tr><tr><td>操作元素内容</td><td>元素.innerText</td><td>操作元素内容，不解析标签</td></tr><tr><td>元素.innerHTML</td><td>操作元素内容，解析标签</td><td></td></tr><tr><td>操作元素样式</td><td>元素.style.width</td><td>通过style操作样式</td></tr><tr><td>元素.className</td><td>通过类名操作样式</td><td></td></tr><tr><td>元素.classList.add()</td><td>增加类名</td><td></td></tr><tr><td>元素.classList.remove()</td><td>删除类名</td><td></td></tr><tr><td>元素.classList.toggle()</td><td>切换类名</td><td></td></tr><tr><td>间隔函数</td><td>setInterval(function()  {}, 1000)</td><td>定时器，每隔指定时间重复执行</td></tr></tbody></table><h2 id="课程介绍">课程介绍</h2><blockquote><p>web APIs 作用：  JavaScript 去操作页面文档和浏览器</p></blockquote><h3 id="什么是-API">什么是 API</h3><p>API: 应用程序接口（Application Programming Interface）</p><p>接口：无需关心内部如何实现，程序员只需要调用就可以很方便实现某些功能</p><h2 id="DOM简介">DOM简介</h2><p><strong>DOM</strong>（Document Object Model——文档对象模型）</p><p>**作用：**DOM用来 操作网页文档，开发网页特效和实现用户交互</p><p>DOM的核心思想就是把网页内容当做<strong>对象</strong>来处理，通过对象的属性和方法对网页内容操作</p><h3 id="document-对象">document 对象</h3><p>是 DOM 里提供的一个对象，是DOM顶级对象</p><p>作为网页内容的入口</p><p>所以它提供的属性和方法都是用来访问和操作网页内容的</p><p>例：document.write()</p><h2 id="获取DOM对象">获取DOM对象</h2><h3 id="利用css选择器来获取DOM元素">利用css选择器来获取DOM元素</h3><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br></pre></td></tr></table></figure><p>**参数: **</p><p>包含一个或多个有效的CSS选择器 字符串</p><p><strong>返回值：</strong></p><p>CSS选择器匹配的第一个元素对象</p><p>如果没有匹配到，则返回 null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用css选择器来获取DOM元素</span></span><br><span class="line"><span class="comment">// 1. document.querySelector() 选择指定css选择器的第一个元素</span></span><br><span class="line"><span class="comment">// 1.1 参数是字符串的css选择器</span></span><br><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2 返回值是dom对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> box)  <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(box)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ol li&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(li)   <span class="comment">// 只选择满足条件的第一个元素li</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ol li:nth-child(2)&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(li)   <span class="comment">// 选择第2个小li</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.3 如果获取不到则返回 null</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p)  <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h3 id="选择指定css选择器的所有元素">选择指定css选择器的所有元素</h3><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.nav li&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>参数:</strong></p><p>包含一个或多个有效的CSS选择器 字符串</p><p><strong>返回值：</strong></p><p>CSS选择器匹配的NodeList  伪数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. document.querySelectorAll() 选择指定css选择器的所有元素</span></span><br><span class="line"><span class="comment">// 2.1 参数还是字符串的css选择器</span></span><br><span class="line"><span class="keyword">const</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.nav li&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.2 返回值是一个伪数组里面包含了所有的dom对象 li</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lis)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.3 伪数组</span></span><br><span class="line"><span class="comment">// (1) 有长度和索引号</span></span><br><span class="line"><span class="comment">// (2) 没有数组的一些常用方法 比如 push  pop  splice等方法</span></span><br><span class="line"><span class="comment">// lis.push(1)</span></span><br><span class="line"><span class="comment">// console.log(lis)  // 因为lis是伪数组无法使用push方法所以报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.4 利用循环遍历伪数组得到里面的每一个元素对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[i]) <span class="comment">// 里面的每一个元素对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.5 即使只有1个元素，我们querySelectorAll 获得的也是一个伪数组，里面只有1个元素而已</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> boxs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boxs)</span><br></pre></td></tr></table></figure><h3 id="其他方式-了解">其他方式(了解)</h3><table><thead><tr><th>语法</th><th>实例</th><th>描述</th></tr></thead><tbody><tr><td>getElementById</td><td>document.getElementById(‘box’)</td><td>根据id获取元素，单个元素</td></tr><tr><td>getElementsByTagName</td><td>document.getElementsByTagName(‘li’)</td><td>根据标签名获取元素，伪数组</td></tr><tr><td>getElementsByClassName</td><td>document.getElementsByClassName(‘one’)</td><td>根据类名获取元素，伪数组</td></tr><tr><td>getElementsByName</td><td>document.getElementsByName(‘sex’)</td><td>根据name属性值获取元素，伪数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. getElementById   根据id获取</span></span><br><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. getElementsByClassName   根据类名获取  返回伪数组</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;item&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(items)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. getElementsByTagName  根据标签名获取 返回伪数组</span></span><br><span class="line"><span class="keyword">const</span> ps = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ps)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. getElementsByName  根据name属性获取 返回伪数组</span></span><br><span class="line"><span class="keyword">const</span> inputs = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(inputs)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="操作元素内容">操作元素内容</h2><p>DOM对象可以操作页面标签，所以本质上就是操作DOM对象（增删改查）</p><p>如果想要操作标签元素的内容，则可以使用如下2种方式：</p><p>1.对象.innerText 属性</p><p>2.对象.innerHTML 属性</p><h3 id="innerText">innerText</h3><ol><li><code>innerText</code> 将文本内容添加/更新到任意标签位置，<strong>文本中包含的标签不会被解析。</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 操作DOM元素内容</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 对象.innerText 增删改查</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.1 查</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">innerText</span>)  <span class="comment">// 古丽扎娜</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.2 改</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">innerText</span> = <span class="string">&#x27;lwz&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.3 增</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> box1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box1)</span></span><br><span class="line"><span class="language-javascript">  box1.<span class="property">innerText</span> = <span class="string">&#x27;lwwzz&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.4 删  给空字符串可以删除内容</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">innerText</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  box1.<span class="property">innerText</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="innerHTML">innerHTML</h3><ol><li><code>innerHTML</code> 将文本内容添加/更新到任意标签位置，<strong>文本中包含的标签会被解析。</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 对象.innerHTML  会解析标签</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;strong&gt;lwzzzzzzz&lt;/strong&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：如果文本内容中包含 <code>html</code> 标签时推荐使用 <code>innerHTML</code>，否则建议使用 <code>innerText</code> 属性。</p><p>##操作元素属性</p><ol><li>操作元素常用属性</li><li>操作元素样式属性</li><li>操作 表单元素 属性</li><li>自定义属性</li></ol><h3 id="常用属性修改">常用属性修改</h3><p>可以通过DOM操作元素属性，比如通过 src 更换 图片地址</p><p>最常见的属性比如：<code> href</code>、<code>title</code>、<code>src</code> 等等</p><ol><li>直接能过属性名修改，最简洁的语法</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 先获取这个元素</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 操作DOM元素常见属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.1 查</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(img.<span class="property">src</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.2 改</span></span></span><br><span class="line"><span class="language-javascript">  img.<span class="property">src</span> = <span class="string">&#x27;./images/3.png&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.3 增</span></span></span><br><span class="line"><span class="language-javascript">  img.<span class="property">title</span> = <span class="string">&#x27;我是播仔，我是不是很可爱&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.4 删</span></span></span><br><span class="line"><span class="language-javascript">  img.<span class="property">alt</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>随机背景案例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>随机显示图片案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 随机显示图片案例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 图片地址</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> arr = [</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;./images/1.png&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;./images/2.png&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;./images/3.png&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;./images/4.png&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取图片元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 利用随机数抽取数组中的一个地址</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> random = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * arr.<span class="property">length</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[random]) <span class="comment">// 得到图片地址</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 把地址赋值给图片src属性</span></span></span><br><span class="line"><span class="language-javascript">    img.<span class="property">src</span> = arr[random]</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="操作样式属性">操作样式属性</h3><p>还可以通过 DOM对象修改标签元素的样式属性</p><ul><li>比如通过 轮播图小圆点自动更换颜色 样式</li><li>点击按钮可以滚动图片，这是移动的的位置 translateX 等等</li></ul><h4 id="通过-style-属性操作元素样式">通过 style 属性操作元素样式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 通过style操作元素样式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 先要获取这个box元素对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 通过style来从操作样式</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;300px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">style</span>.<span class="property">marginTop</span> = <span class="string">&#x27;50px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;skyblue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 3. 注意事项</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 3.1 给样式赋值的时候，千万不要忘了加单位比如 300px</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 3.2 如果有-的样式，我们采取的是小驼峰命名法比如 marginTop</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 3.3 一定不要忘了加 style 属性</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>1.修改样式通过style属性引出</p><p>2.如果属性有-连接符，需要转换为小驼峰命名法</p><p>3.赋值的时候，需要的时候不要忘记加css单位</p></blockquote><h4 id="操作类名-className-操作CSS">操作类名(className) 操作CSS</h4><p>如果修改的样式比较多，直接通过style属性修改比较繁琐，我们可以通过借助于css类名的形式</p><p>**核心：**把多个样式放到css一个类中，然后把这个类添加到这个元素身上</p><p><strong>语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 通过类名操作元素样式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 获取box盒子</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 利用类名操作元素样式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// box.className = &#x27;circle&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">className</span> = <span class="string">&#x27;box circle&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 3. 利用类名操作样式添加的新的类名会覆盖掉原先的类名</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>1.由于class是关键字, 所以使用className去代替</p><p>2.className是使用新值换旧值, 如果需要添加一个类,需要保留之前的类名</p></blockquote><h4 id="通过-classList-操作类控制CSS">通过 classList 操作类控制CSS</h4><p>为了解决className 容易覆盖以前的类名，我们可以通过classList方式追加和删除类名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 获取box盒子</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.通过classList操作元素样式(推荐)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.1 追加类名</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// box.classList.add(&#x27;circle&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.2 删除类名</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// box.classList.remove(&#x27;box&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.3 切换类名： 如果元素身上有这个类名，那么就删除，如果没有这个类名则添加</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;circle&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="操作表单元素属性">操作表单元素属性</h3><p>表单很多情况，也需要修改属性，比如点击眼睛，可以看到密码，本质是把表单类型转换为文本框</p><p>正常的有属性有取值的跟其他的标签属性没有任何区别</p><blockquote><p><strong>获取:</strong> DOM对象.属性</p><p><strong>设置:</strong> DOM对象.属性= 新值</p></blockquote><p>表单属性中添加就有效果，移除就没有效果，一律使用布尔值表示</p><p>比如实现禁用按钮，勾选按钮等</p><p>如果为 <code>true</code> 代表添加了该属性</p><p>如果是 <code>false</code> 代表移除了该属性</p><p>比如： <code>disabled</code>、<code>checked</code>、<code>selected</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 操作表单属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 操作表单 type 和 value 属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.1 修改type属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> username = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;[name=username]&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(username)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// username.type = &#x27;password&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.2 操作表单的 value 属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.log(username.value)  // 查</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// username.value = &#x27;用户名试试&#x27;  // 增</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// username.value = &#x27;请输入用户名&#x27; // 改</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// username.value = &#x27;&#x27;  // 删</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 禁用按钮或者是勾选复选框  布尔型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.1 禁用按钮  </span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// button.disabled = true  // true 是禁用</span></span></span><br><span class="line"><span class="language-javascript">  button.<span class="property">disabled</span> = <span class="literal">false</span>  <span class="comment">// false 是不禁用</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.2 勾选复选框</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> agree = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;[name=agree]&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(agree)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// agree.checked = true // true 是选中复选框</span></span></span><br><span class="line"><span class="language-javascript">  agree.<span class="property">checked</span> = <span class="literal">false</span> <span class="comment">// flase 是不选中复选框</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义属性（重要）">自定义属性（重要）</h3><p><strong>标准属性:</strong> 标签天生自带的属性 比如class、id、title等, 可以直接使用点语法操作比如：<code>对象.title</code></p><p><strong>自定义属性：</strong></p><ul><li>在html5中推出来了专门的data-自定义属性</li><li>使用场景：通过自定义属性可以存储数据，后期可以使用这个数据</li><li>在标签上一律以data-开头</li><li>在DOM对象上一律以dataset对象方式获取</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 自定义属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 获取盒子</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 得到自定义属性值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.log(box.dataset)  // 得到一个对象集合</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.log(box.dataset.id) // 1</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.log(box.dataset)  // 得到一个对象集合</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">dataset</span>.<span class="property">name</span>) <span class="comment">// box</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定时器-间隔函数">定时器-间隔函数</h2><p>网页中经常会需要一种功能：每隔一段时间需要自动执行一段代码，不需要我们手动去触发</p><p>例如：网页中的<code>倒计时</code></p><p>要实现这种需求，需要<code>定时器函数</code></p><p>定时器函数有两种:  <code>间隔函数</code>和 延迟函数</p><p><code>setInterval</code> 是 JavaScript 中内置的函数，它的作用是间隔固定的时间自动重复执行另一个函数，也叫定时器函数。</p><h3 id="开启定时器">开启定时器:</h3><p><strong>语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是1秒钟执行一次&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**作用：**每隔一段时间调用这个函数</p><p>**注意：**间隔时间单位是毫秒</p><h3 id="关闭定时器">关闭定时器</h3><p>需要定时器<code>变量名</code>来关闭</p><p>返回的是一个唯一的<code>数字</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(repeat, <span class="number">1000</span>)  <span class="comment">// 注意调用的时候直接写函数名字不需要写小括号</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(timer) <span class="comment">//  1</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> timer1 = <span class="built_in">setInterval</span>(repeat, <span class="number">1000</span>)  <span class="comment">// 注意调用的时候直接写函数名字不需要写小括号</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(timer1) <span class="comment">//  2</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 关闭定时器</span></span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">clearInterval</span>(timer)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">🍰知识总结1</summary>
    
    
    
    <category term="webAPIs" scheme="https://lwzblog.com/categories/webAPIs/"/>
    
    
    <category term="webAPIs" scheme="https://lwzblog.com/tags/webAPIs/"/>
    
  </entry>
  
</feed>
